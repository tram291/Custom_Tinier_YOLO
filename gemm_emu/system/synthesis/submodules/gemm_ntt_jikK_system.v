// (C) 1992-2018 Intel Corporation.                            
// Intel, the Intel logo, Intel, MegaCore, NIOS II, Quartus and TalkBack words    
// and logos are trademarks of Intel Corporation or its subsidiaries in the U.S.  
// and/or other countries. Other marks and brands may be claimed as the property  
// of others. See Trademarks on intel.com for full list of Intel trademarks or    
// the Trademarks & Brands Names Database (if Intel) or See www.Intel.com/legal (if Altera) 
// Your use of Intel Corporation's design tools, logic functions and other        
// software and tools, and its AMPP partner logic functions, and any output       
// files any of the foregoing (including device programming or simulation         
// files), and any associated documentation or information are expressly subject  
// to the terms and conditions of the Altera Program License Subscription         
// Agreement, Intel MegaCore Function License Agreement, or other applicable      
// license agreement, including, without limitation, that your use is for the     
// sole purpose of programming logic devices manufactured by Intel and sold by    
// Intel or its authorized distributors.  Please refer to the applicable          
// agreement for further details.                                                 

// Generated by Intel(R) FPGA SDK for OpenCL(TM), Version 18.1.0 Build 625 Standard Edition, Copyright (C) 2018 Intel Corporation

/////////////////////////////////////////////////////////////////
// MODULE gemm_ntt_jikK_system
/////////////////////////////////////////////////////////////////
module gemm_ntt_jikK_system
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   // AVS avs_gemm_nn9W_cra
   input logic avs_gemm_nn9W_cra_enable,
   input logic avs_gemm_nn9W_cra_read,
   input logic avs_gemm_nn9W_cra_write,
   input logic [4:0] avs_gemm_nn9W_cra_address,
   input logic [63:0] avs_gemm_nn9W_cra_writedata,
   input logic [7:0] avs_gemm_nn9W_cra_byteenable,
   output logic [63:0] avs_gemm_nn9W_cra_readdata,
   output logic avs_gemm_nn9W_cra_readdatavalid,
   // AVS avs_gemm_nnfW_cra
   input logic avs_gemm_nnfW_cra_enable,
   input logic avs_gemm_nnfW_cra_read,
   input logic avs_gemm_nnfW_cra_write,
   input logic [4:0] avs_gemm_nnfW_cra_address,
   input logic [63:0] avs_gemm_nnfW_cra_writedata,
   input logic [7:0] avs_gemm_nnfW_cra_byteenable,
   output logic [63:0] avs_gemm_nnfW_cra_readdata,
   output logic avs_gemm_nnfW_cra_readdatavalid,
   output logic kernel_irq,
   // AVM avm_memgmem0_port_0_0_rw
   output logic avm_memgmem0_port_0_0_rw_enable,
   output logic avm_memgmem0_port_0_0_rw_read,
   output logic avm_memgmem0_port_0_0_rw_write,
   output logic [4:0] avm_memgmem0_port_0_0_rw_burstcount,
   output logic [29:0] avm_memgmem0_port_0_0_rw_address,
   output logic [255:0] avm_memgmem0_port_0_0_rw_writedata,
   output logic [31:0] avm_memgmem0_port_0_0_rw_byteenable,
   input logic avm_memgmem0_port_0_0_rw_waitrequest,
   input logic [255:0] avm_memgmem0_port_0_0_rw_readdata,
   input logic avm_memgmem0_port_0_0_rw_readdatavalid,
   input logic avm_memgmem0_port_0_0_rw_writeack
);
   logic [1:0] kernel_irqs;
   logic avm_kernel_rd_enable [6];
   logic avm_kernel_rd_read [6];
   logic avm_kernel_rd_write [6];
   logic [4:0] avm_kernel_rd_burstcount [6];
   logic [29:0] avm_kernel_rd_address [6];
   logic [255:0] avm_kernel_rd_writedata [6];
   logic [31:0] avm_kernel_rd_byteenable [6];
   logic avm_kernel_rd_waitrequest [6];
   logic [255:0] avm_kernel_rd_readdata [6];
   logic avm_kernel_rd_readdatavalid [6];
   logic avm_kernel_rd_writeack [6];
   logic avm_kernel_wr_enable [2];
   logic avm_kernel_wr_read [2];
   logic avm_kernel_wr_write [2];
   logic [4:0] avm_kernel_wr_burstcount [2];
   logic [29:0] avm_kernel_wr_address [2];
   logic [255:0] avm_kernel_wr_writedata [2];
   logic [31:0] avm_kernel_wr_byteenable [2];
   logic avm_kernel_wr_waitrequest [2];
   logic [255:0] avm_kernel_wr_readdata [2];
   logic avm_kernel_wr_readdatavalid [2];
   logic avm_kernel_wr_writeack [2];
   logic ic_avm_enable [1];
   logic ic_avm_read [1];
   logic ic_avm_write [1];
   logic [4:0] ic_avm_burstcount [1];
   logic [29:0] ic_avm_address [1];
   logic [255:0] ic_avm_writedata [1];
   logic [31:0] ic_avm_byteenable [1];
   logic ic_avm_waitrequest [1];
   logic [255:0] ic_avm_readdata [1];
   logic ic_avm_readdatavalid [1];
   logic ic_avm_writeack [1];

   // INST gemm_nn9W_std_ic_inst of gemm_nn9W_std_ic_partition_wrapper
   gemm_nn9W_std_ic_partition_wrapper gemm_nn9W_std_ic_inst
   (
      .clock(clock),
      .clock2x(clock2x),
      .resetn(resetn),
      .cra_irq_gemm_nn9W(kernel_irqs[0]),
      // AVS avs_gemm_nn9W_cra
      .avs_gemm_nn9W_cra_enable(avs_gemm_nn9W_cra_enable),
      .avs_gemm_nn9W_cra_read(avs_gemm_nn9W_cra_read),
      .avs_gemm_nn9W_cra_write(avs_gemm_nn9W_cra_write),
      .avs_gemm_nn9W_cra_address(avs_gemm_nn9W_cra_address),
      .avs_gemm_nn9W_cra_writedata(avs_gemm_nn9W_cra_writedata),
      .avs_gemm_nn9W_cra_byteenable(avs_gemm_nn9W_cra_byteenable),
      .avs_gemm_nn9W_cra_readdata(avs_gemm_nn9W_cra_readdata),
      .avs_gemm_nn9W_cra_readdatavalid(avs_gemm_nn9W_cra_readdatavalid),
      // AVM gemm_nn9W_0_avm_memcoalesce_A_load_0
      .gemm_nn9W_0_avm_memcoalesce_A_load_0_enable(avm_kernel_rd_enable[0]),
      .gemm_nn9W_0_avm_memcoalesce_A_load_0_read(avm_kernel_rd_read[0]),
      .gemm_nn9W_0_avm_memcoalesce_A_load_0_write(avm_kernel_rd_write[0]),
      .gemm_nn9W_0_avm_memcoalesce_A_load_0_burstcount(avm_kernel_rd_burstcount[0]),
      .gemm_nn9W_0_avm_memcoalesce_A_load_0_address(avm_kernel_rd_address[0]),
      .gemm_nn9W_0_avm_memcoalesce_A_load_0_writedata(avm_kernel_rd_writedata[0]),
      .gemm_nn9W_0_avm_memcoalesce_A_load_0_byteenable(avm_kernel_rd_byteenable[0]),
      .gemm_nn9W_0_avm_memcoalesce_A_load_0_waitrequest(avm_kernel_rd_waitrequest[0]),
      .gemm_nn9W_0_avm_memcoalesce_A_load_0_readdata(avm_kernel_rd_readdata[0]),
      .gemm_nn9W_0_avm_memcoalesce_A_load_0_readdatavalid(avm_kernel_rd_readdatavalid[0]),
      .gemm_nn9W_0_avm_memcoalesce_A_load_0_writeack(avm_kernel_rd_writeack[0]),
      // AVM gemm_nn9W_0_avm_memcoalesce_B_load_0
      .gemm_nn9W_0_avm_memcoalesce_B_load_0_enable(avm_kernel_rd_enable[1]),
      .gemm_nn9W_0_avm_memcoalesce_B_load_0_read(avm_kernel_rd_read[1]),
      .gemm_nn9W_0_avm_memcoalesce_B_load_0_write(avm_kernel_rd_write[1]),
      .gemm_nn9W_0_avm_memcoalesce_B_load_0_burstcount(avm_kernel_rd_burstcount[1]),
      .gemm_nn9W_0_avm_memcoalesce_B_load_0_address(avm_kernel_rd_address[1]),
      .gemm_nn9W_0_avm_memcoalesce_B_load_0_writedata(avm_kernel_rd_writedata[1]),
      .gemm_nn9W_0_avm_memcoalesce_B_load_0_byteenable(avm_kernel_rd_byteenable[1]),
      .gemm_nn9W_0_avm_memcoalesce_B_load_0_waitrequest(avm_kernel_rd_waitrequest[1]),
      .gemm_nn9W_0_avm_memcoalesce_B_load_0_readdata(avm_kernel_rd_readdata[1]),
      .gemm_nn9W_0_avm_memcoalesce_B_load_0_readdatavalid(avm_kernel_rd_readdatavalid[1]),
      .gemm_nn9W_0_avm_memcoalesce_B_load_0_writeack(avm_kernel_rd_writeack[1]),
      // AVM gemm_nn9W_0_avm_memdep_276
      .gemm_nn9W_0_avm_memdep_276_enable(avm_kernel_wr_enable[0]),
      .gemm_nn9W_0_avm_memdep_276_read(avm_kernel_wr_read[0]),
      .gemm_nn9W_0_avm_memdep_276_write(avm_kernel_wr_write[0]),
      .gemm_nn9W_0_avm_memdep_276_burstcount(avm_kernel_wr_burstcount[0]),
      .gemm_nn9W_0_avm_memdep_276_address(avm_kernel_wr_address[0]),
      .gemm_nn9W_0_avm_memdep_276_writedata(avm_kernel_wr_writedata[0]),
      .gemm_nn9W_0_avm_memdep_276_byteenable(avm_kernel_wr_byteenable[0]),
      .gemm_nn9W_0_avm_memdep_276_waitrequest(avm_kernel_wr_waitrequest[0]),
      .gemm_nn9W_0_avm_memdep_276_readdata(avm_kernel_wr_readdata[0]),
      .gemm_nn9W_0_avm_memdep_276_readdatavalid(avm_kernel_wr_readdatavalid[0]),
      .gemm_nn9W_0_avm_memdep_276_writeack(avm_kernel_wr_writeack[0]),
      // AVM gemm_nn9W_0_avm_unnamed_gemm_nn9W2
      .gemm_nn9W_0_avm_unnamed_gemm_nn9W2_enable(avm_kernel_rd_enable[2]),
      .gemm_nn9W_0_avm_unnamed_gemm_nn9W2_read(avm_kernel_rd_read[2]),
      .gemm_nn9W_0_avm_unnamed_gemm_nn9W2_write(avm_kernel_rd_write[2]),
      .gemm_nn9W_0_avm_unnamed_gemm_nn9W2_burstcount(avm_kernel_rd_burstcount[2]),
      .gemm_nn9W_0_avm_unnamed_gemm_nn9W2_address(avm_kernel_rd_address[2]),
      .gemm_nn9W_0_avm_unnamed_gemm_nn9W2_writedata(avm_kernel_rd_writedata[2]),
      .gemm_nn9W_0_avm_unnamed_gemm_nn9W2_byteenable(avm_kernel_rd_byteenable[2]),
      .gemm_nn9W_0_avm_unnamed_gemm_nn9W2_waitrequest(avm_kernel_rd_waitrequest[2]),
      .gemm_nn9W_0_avm_unnamed_gemm_nn9W2_readdata(avm_kernel_rd_readdata[2]),
      .gemm_nn9W_0_avm_unnamed_gemm_nn9W2_readdatavalid(avm_kernel_rd_readdatavalid[2]),
      .gemm_nn9W_0_avm_unnamed_gemm_nn9W2_writeack(avm_kernel_rd_writeack[2])
   );

   // INST gemm_nnfW_std_ic_inst of gemm_nnfW_std_ic_partition_wrapper
   gemm_nnfW_std_ic_partition_wrapper gemm_nnfW_std_ic_inst
   (
      .clock(clock),
      .clock2x(clock2x),
      .resetn(resetn),
      .cra_irq_gemm_nnfW(kernel_irqs[1]),
      // AVS avs_gemm_nnfW_cra
      .avs_gemm_nnfW_cra_enable(avs_gemm_nnfW_cra_enable),
      .avs_gemm_nnfW_cra_read(avs_gemm_nnfW_cra_read),
      .avs_gemm_nnfW_cra_write(avs_gemm_nnfW_cra_write),
      .avs_gemm_nnfW_cra_address(avs_gemm_nnfW_cra_address),
      .avs_gemm_nnfW_cra_writedata(avs_gemm_nnfW_cra_writedata),
      .avs_gemm_nnfW_cra_byteenable(avs_gemm_nnfW_cra_byteenable),
      .avs_gemm_nnfW_cra_readdata(avs_gemm_nnfW_cra_readdata),
      .avs_gemm_nnfW_cra_readdatavalid(avs_gemm_nnfW_cra_readdatavalid),
      // AVM gemm_nnfW_0_avm_memcoalesce_A_load_0
      .gemm_nnfW_0_avm_memcoalesce_A_load_0_enable(avm_kernel_rd_enable[3]),
      .gemm_nnfW_0_avm_memcoalesce_A_load_0_read(avm_kernel_rd_read[3]),
      .gemm_nnfW_0_avm_memcoalesce_A_load_0_write(avm_kernel_rd_write[3]),
      .gemm_nnfW_0_avm_memcoalesce_A_load_0_burstcount(avm_kernel_rd_burstcount[3]),
      .gemm_nnfW_0_avm_memcoalesce_A_load_0_address(avm_kernel_rd_address[3]),
      .gemm_nnfW_0_avm_memcoalesce_A_load_0_writedata(avm_kernel_rd_writedata[3]),
      .gemm_nnfW_0_avm_memcoalesce_A_load_0_byteenable(avm_kernel_rd_byteenable[3]),
      .gemm_nnfW_0_avm_memcoalesce_A_load_0_waitrequest(avm_kernel_rd_waitrequest[3]),
      .gemm_nnfW_0_avm_memcoalesce_A_load_0_readdata(avm_kernel_rd_readdata[3]),
      .gemm_nnfW_0_avm_memcoalesce_A_load_0_readdatavalid(avm_kernel_rd_readdatavalid[3]),
      .gemm_nnfW_0_avm_memcoalesce_A_load_0_writeack(avm_kernel_rd_writeack[3]),
      // AVM gemm_nnfW_0_avm_memcoalesce_B_load_0
      .gemm_nnfW_0_avm_memcoalesce_B_load_0_enable(avm_kernel_rd_enable[4]),
      .gemm_nnfW_0_avm_memcoalesce_B_load_0_read(avm_kernel_rd_read[4]),
      .gemm_nnfW_0_avm_memcoalesce_B_load_0_write(avm_kernel_rd_write[4]),
      .gemm_nnfW_0_avm_memcoalesce_B_load_0_burstcount(avm_kernel_rd_burstcount[4]),
      .gemm_nnfW_0_avm_memcoalesce_B_load_0_address(avm_kernel_rd_address[4]),
      .gemm_nnfW_0_avm_memcoalesce_B_load_0_writedata(avm_kernel_rd_writedata[4]),
      .gemm_nnfW_0_avm_memcoalesce_B_load_0_byteenable(avm_kernel_rd_byteenable[4]),
      .gemm_nnfW_0_avm_memcoalesce_B_load_0_waitrequest(avm_kernel_rd_waitrequest[4]),
      .gemm_nnfW_0_avm_memcoalesce_B_load_0_readdata(avm_kernel_rd_readdata[4]),
      .gemm_nnfW_0_avm_memcoalesce_B_load_0_readdatavalid(avm_kernel_rd_readdatavalid[4]),
      .gemm_nnfW_0_avm_memcoalesce_B_load_0_writeack(avm_kernel_rd_writeack[4]),
      // AVM gemm_nnfW_0_avm_memdep_5
      .gemm_nnfW_0_avm_memdep_5_enable(avm_kernel_wr_enable[1]),
      .gemm_nnfW_0_avm_memdep_5_read(avm_kernel_wr_read[1]),
      .gemm_nnfW_0_avm_memdep_5_write(avm_kernel_wr_write[1]),
      .gemm_nnfW_0_avm_memdep_5_burstcount(avm_kernel_wr_burstcount[1]),
      .gemm_nnfW_0_avm_memdep_5_address(avm_kernel_wr_address[1]),
      .gemm_nnfW_0_avm_memdep_5_writedata(avm_kernel_wr_writedata[1]),
      .gemm_nnfW_0_avm_memdep_5_byteenable(avm_kernel_wr_byteenable[1]),
      .gemm_nnfW_0_avm_memdep_5_waitrequest(avm_kernel_wr_waitrequest[1]),
      .gemm_nnfW_0_avm_memdep_5_readdata(avm_kernel_wr_readdata[1]),
      .gemm_nnfW_0_avm_memdep_5_readdatavalid(avm_kernel_wr_readdatavalid[1]),
      .gemm_nnfW_0_avm_memdep_5_writeack(avm_kernel_wr_writeack[1]),
      // AVM gemm_nnfW_0_avm_unnamed_gemm_nnfW5
      .gemm_nnfW_0_avm_unnamed_gemm_nnfW5_enable(avm_kernel_rd_enable[5]),
      .gemm_nnfW_0_avm_unnamed_gemm_nnfW5_read(avm_kernel_rd_read[5]),
      .gemm_nnfW_0_avm_unnamed_gemm_nnfW5_write(avm_kernel_rd_write[5]),
      .gemm_nnfW_0_avm_unnamed_gemm_nnfW5_burstcount(avm_kernel_rd_burstcount[5]),
      .gemm_nnfW_0_avm_unnamed_gemm_nnfW5_address(avm_kernel_rd_address[5]),
      .gemm_nnfW_0_avm_unnamed_gemm_nnfW5_writedata(avm_kernel_rd_writedata[5]),
      .gemm_nnfW_0_avm_unnamed_gemm_nnfW5_byteenable(avm_kernel_rd_byteenable[5]),
      .gemm_nnfW_0_avm_unnamed_gemm_nnfW5_waitrequest(avm_kernel_rd_waitrequest[5]),
      .gemm_nnfW_0_avm_unnamed_gemm_nnfW5_readdata(avm_kernel_rd_readdata[5]),
      .gemm_nnfW_0_avm_unnamed_gemm_nnfW5_readdatavalid(avm_kernel_rd_readdatavalid[5]),
      .gemm_nnfW_0_avm_unnamed_gemm_nnfW5_writeack(avm_kernel_rd_writeack[5])
   );

   assign kernel_irq = |kernel_irqs;
   // INST lsu_ic_top of lsu_ic_top
   lsu_ic_top
   #(
      .AWIDTH(30),
      .SHIFT(30),
      .MWIDTH_BYTES(32),
      .BURST_CNT_W(5),
      .NUM_RD_PORT(6),
      .NUM_WR_PORT(2),
      .NUM_DIMM(1),
      .ENABLE_DUAL_RING(0),
      .ENABLE_MULTIPLE_WR_RING(0),
      .ENABLE_LAST_WAIT(0),
      .ENABLE_REORDER(0),
      .NUM_REORDER(1),
      .HIGH_FMAX(0)
   )
   lsu_ic_top
   (
      .clk(clock),
      .resetn(resetn),
      .i_rd_request(avm_kernel_rd_read),
      .i_rd_address(avm_kernel_rd_address),
      .i_rd_burstcount(avm_kernel_rd_burstcount),
      .i_wr_byteenable(avm_kernel_wr_byteenable),
      .i_wr_address(avm_kernel_wr_address),
      .i_wr_request(avm_kernel_wr_write),
      .i_wr_burstcount(avm_kernel_wr_burstcount),
      .i_wr_writedata(avm_kernel_wr_writedata),
      .i_avm_waitrequest(ic_avm_waitrequest),
      .i_avm_readdata(ic_avm_readdata),
      .i_avm_readdatavalid(ic_avm_readdatavalid),
      .o_avm_byteenable(ic_avm_byteenable),
      .o_avm_address(ic_avm_address),
      .o_avm_read(ic_avm_read),
      .o_avm_write(ic_avm_write),
      .o_avm_burstcount(ic_avm_burstcount),
      .o_wr_waitrequest(avm_kernel_wr_waitrequest),
      .o_avm_writedata(ic_avm_writedata),
      .o_avm_writeack(avm_kernel_wr_writeack),
      .o_rd_waitrequest(avm_kernel_rd_waitrequest),
      .o_avm_readdata(avm_kernel_rd_readdata),
      .o_avm_readdatavalid(avm_kernel_rd_readdatavalid)
   );

   assign avm_memgmem0_port_0_0_rw_read = ic_avm_read[0];
   assign avm_memgmem0_port_0_0_rw_write = ic_avm_write[0];
   assign avm_memgmem0_port_0_0_rw_burstcount = ic_avm_burstcount[0];
   assign avm_memgmem0_port_0_0_rw_address = ic_avm_address[0];
   assign avm_memgmem0_port_0_0_rw_writedata = ic_avm_writedata[0];
   assign avm_memgmem0_port_0_0_rw_byteenable = ic_avm_byteenable[0];
   assign ic_avm_waitrequest[0] = avm_memgmem0_port_0_0_rw_waitrequest;
   assign ic_avm_readdata[0] = avm_memgmem0_port_0_0_rw_readdata;
   assign ic_avm_readdatavalid[0] = avm_memgmem0_port_0_0_rw_readdatavalid;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE gemm_nn9W_std_ic_partition_wrapper
/////////////////////////////////////////////////////////////////
module gemm_nn9W_std_ic_partition_wrapper
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   output logic cra_irq_gemm_nn9W,
   // AVS avs_gemm_nn9W_cra
   input logic avs_gemm_nn9W_cra_enable,
   input logic avs_gemm_nn9W_cra_read,
   input logic avs_gemm_nn9W_cra_write,
   input logic [4:0] avs_gemm_nn9W_cra_address,
   input logic [63:0] avs_gemm_nn9W_cra_writedata,
   input logic [7:0] avs_gemm_nn9W_cra_byteenable,
   output logic [63:0] avs_gemm_nn9W_cra_readdata,
   output logic avs_gemm_nn9W_cra_readdatavalid,
   // AVM gemm_nn9W_0_avm_memcoalesce_A_load_0
   output logic gemm_nn9W_0_avm_memcoalesce_A_load_0_enable,
   output logic gemm_nn9W_0_avm_memcoalesce_A_load_0_read,
   output logic gemm_nn9W_0_avm_memcoalesce_A_load_0_write,
   output logic [4:0] gemm_nn9W_0_avm_memcoalesce_A_load_0_burstcount,
   output logic [29:0] gemm_nn9W_0_avm_memcoalesce_A_load_0_address,
   output logic [255:0] gemm_nn9W_0_avm_memcoalesce_A_load_0_writedata,
   output logic [31:0] gemm_nn9W_0_avm_memcoalesce_A_load_0_byteenable,
   input logic gemm_nn9W_0_avm_memcoalesce_A_load_0_waitrequest,
   input logic [255:0] gemm_nn9W_0_avm_memcoalesce_A_load_0_readdata,
   input logic gemm_nn9W_0_avm_memcoalesce_A_load_0_readdatavalid,
   input logic gemm_nn9W_0_avm_memcoalesce_A_load_0_writeack,
   // AVM gemm_nn9W_0_avm_memcoalesce_B_load_0
   output logic gemm_nn9W_0_avm_memcoalesce_B_load_0_enable,
   output logic gemm_nn9W_0_avm_memcoalesce_B_load_0_read,
   output logic gemm_nn9W_0_avm_memcoalesce_B_load_0_write,
   output logic [4:0] gemm_nn9W_0_avm_memcoalesce_B_load_0_burstcount,
   output logic [29:0] gemm_nn9W_0_avm_memcoalesce_B_load_0_address,
   output logic [255:0] gemm_nn9W_0_avm_memcoalesce_B_load_0_writedata,
   output logic [31:0] gemm_nn9W_0_avm_memcoalesce_B_load_0_byteenable,
   input logic gemm_nn9W_0_avm_memcoalesce_B_load_0_waitrequest,
   input logic [255:0] gemm_nn9W_0_avm_memcoalesce_B_load_0_readdata,
   input logic gemm_nn9W_0_avm_memcoalesce_B_load_0_readdatavalid,
   input logic gemm_nn9W_0_avm_memcoalesce_B_load_0_writeack,
   // AVM gemm_nn9W_0_avm_memdep_276
   output logic gemm_nn9W_0_avm_memdep_276_enable,
   output logic gemm_nn9W_0_avm_memdep_276_read,
   output logic gemm_nn9W_0_avm_memdep_276_write,
   output logic [4:0] gemm_nn9W_0_avm_memdep_276_burstcount,
   output logic [29:0] gemm_nn9W_0_avm_memdep_276_address,
   output logic [255:0] gemm_nn9W_0_avm_memdep_276_writedata,
   output logic [31:0] gemm_nn9W_0_avm_memdep_276_byteenable,
   input logic gemm_nn9W_0_avm_memdep_276_waitrequest,
   input logic [255:0] gemm_nn9W_0_avm_memdep_276_readdata,
   input logic gemm_nn9W_0_avm_memdep_276_readdatavalid,
   input logic gemm_nn9W_0_avm_memdep_276_writeack,
   // AVM gemm_nn9W_0_avm_unnamed_gemm_nn9W2
   output logic gemm_nn9W_0_avm_unnamed_gemm_nn9W2_enable,
   output logic gemm_nn9W_0_avm_unnamed_gemm_nn9W2_read,
   output logic gemm_nn9W_0_avm_unnamed_gemm_nn9W2_write,
   output logic [4:0] gemm_nn9W_0_avm_unnamed_gemm_nn9W2_burstcount,
   output logic [29:0] gemm_nn9W_0_avm_unnamed_gemm_nn9W2_address,
   output logic [255:0] gemm_nn9W_0_avm_unnamed_gemm_nn9W2_writedata,
   output logic [31:0] gemm_nn9W_0_avm_unnamed_gemm_nn9W2_byteenable,
   input logic gemm_nn9W_0_avm_unnamed_gemm_nn9W2_waitrequest,
   input logic [255:0] gemm_nn9W_0_avm_unnamed_gemm_nn9W2_readdata,
   input logic gemm_nn9W_0_avm_unnamed_gemm_nn9W2_readdatavalid,
   input logic gemm_nn9W_0_avm_unnamed_gemm_nn9W2_writeack
);
   logic gemm_nn9W_start;
   logic [0:0] gemm_nn9W_start_chain;
   logic [0:0] gemm_nn9W_start_kernel_copy;
   logic [0:0] gemm_nn9W_start_task_fd;
   logic [0:0] gemm_nn9W_start_finish_element;
   logic gemm_nn9W_finish;
   logic [0:0] gemm_nn9W_finish_kernel_copy;
   logic [0:0] gemm_nn9W_finish_chain;
   logic [31:0] gemm_nn9W_global_size [2:0];
   logic [31:0] gemm_nn9W_num_groups [2:0];
   logic [31:0] gemm_nn9W_local_size [2:0];
   logic [31:0] gemm_nn9W_global_offset [2:0];
   logic [31:0] gemm_nn9W_work_dim;
   logic [31:0] gemm_nn9W_wg_size;
   logic [0:0] gemm_nn9W_wg_disp_stall_in;
   logic [0:0] gemm_nn9W_wg_disp_stall_in_lookahead;
   logic [0:0] gemm_nn9W_wg_disp_valid_out;
   logic gemm_nn9W_wg_disp_start_out;
   logic [31:0] gemm_nn9W_wg_disp_group_id_out [2:0];
   logic [31:0] gemm_nn9W_wg_disp_global_id_base_out [2:0];
   logic gemm_nn9W_wg_disp_dispatched_all_groups;
   logic [31:0] gemm_nn9W_global_id [1][2:0];
   logic [31:0] gemm_nn9W_local_id [1][2:0];
   logic [31:0] gemm_nn9W_group_id [1][2:0];
   logic [0:0] gemm_nn9W_pending_write;
   logic [0:0] gemm_nn9W_lsu_active;
   logic [0:0] gemm_nn9W_valid_in;
   logic [0:0] gemm_nn9W_valid_out;
   logic [0:0] gemm_nn9W_stall_in;
   logic [0:0] gemm_nn9W_stall_out;
   logic gemm_nn9W_cra_pending_write;
   logic gemm_nn9W_cra_lsu_active;
   logic gemm_nn9W_cra_valid_in;
   logic [415:0] gemm_nn9W_kernel_arguments;

   assign gemm_nn9W_start_chain[0] = gemm_nn9W_start;
   assign gemm_nn9W_finish_chain[0] = 1'b1;
   assign gemm_nn9W_cra_pending_write = |gemm_nn9W_pending_write;
   assign gemm_nn9W_cra_lsu_active = |gemm_nn9W_lsu_active;
   assign gemm_nn9W_cra_valid_in = |gemm_nn9W_valid_in;
   assign gemm_nn9W_stall_in = 0;
   // INST gemm_nn9W_workgroup_dispatcher of acl_work_group_dispatcher
   acl_work_group_dispatcher
   #(
      .WIDTH(32),
      .NUM_COPIES(1),
      .RUN_FOREVER(0),
      .FAMILY("Cyclone V")
   )
   gemm_nn9W_workgroup_dispatcher
   (
      .clock(clock),
      .resetn(resetn),
      .start(gemm_nn9W_start),
      .num_groups(gemm_nn9W_num_groups),
      .local_size(gemm_nn9W_local_size),
      .stall_in(gemm_nn9W_wg_disp_stall_in),
      .stall_in_lookahead(gemm_nn9W_wg_disp_stall_in_lookahead),
      .valid_out(gemm_nn9W_wg_disp_valid_out),
      .group_id_out(gemm_nn9W_wg_disp_group_id_out),
      .global_id_base_out(gemm_nn9W_wg_disp_global_id_base_out),
      .start_out(gemm_nn9W_wg_disp_start_out),
      .dispatched_all_groups(gemm_nn9W_wg_disp_dispatched_all_groups)
   );

   // INST gemm_nn9W_finish_detector of acl_kernel_finish_detector
   acl_kernel_finish_detector
   #(
      .NUM_COPIES(1),
      .WG_SIZE_W(32),
      .GLOBAL_ID_W(32),
      .TESSELLATION_SIZE(0),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0)
   )
   gemm_nn9W_finish_detector
   (
      .clock(clock),
      .resetn(resetn),
      .start(gemm_nn9W_start),
      .wg_size(gemm_nn9W_wg_size),
      .wg_dispatch_valid_out(gemm_nn9W_wg_disp_valid_out),
      .wg_dispatch_stall_in(gemm_nn9W_wg_disp_stall_in),
      .dispatched_all_groups(gemm_nn9W_wg_disp_dispatched_all_groups),
      .kernel_copy_valid_out(gemm_nn9W_valid_out),
      .kernel_copy_stall_in(gemm_nn9W_stall_in),
      .pending_writes(gemm_nn9W_cra_pending_write),
      .finish(gemm_nn9W_finish)
   );

   // INST gemm_nn9W_cra_slave_inst of gemm_nn9W_function_cra_slave
   gemm_nn9W_function_cra_slave gemm_nn9W_cra_slave_inst
   (
      .clock(clock),
      .resetn(resetn),
      .start(gemm_nn9W_start),
      .finish(gemm_nn9W_finish),
      .global_offset_0(gemm_nn9W_global_offset[0]),
      .global_offset_1(gemm_nn9W_global_offset[1]),
      .global_offset_2(gemm_nn9W_global_offset[2]),
      .work_dim(gemm_nn9W_work_dim),
      .has_a_lsu_active(gemm_nn9W_cra_lsu_active),
      .has_a_write_pending(gemm_nn9W_cra_pending_write),
      .valid_in(gemm_nn9W_cra_valid_in),
      .global_size_0(gemm_nn9W_global_size[0]),
      .global_size_1(gemm_nn9W_global_size[1]),
      .global_size_2(gemm_nn9W_global_size[2]),
      .num_groups_0(gemm_nn9W_num_groups[0]),
      .num_groups_1(gemm_nn9W_num_groups[1]),
      .num_groups_2(gemm_nn9W_num_groups[2]),
      .local_size_0(gemm_nn9W_local_size[0]),
      .local_size_1(gemm_nn9W_local_size[1]),
      .local_size_2(gemm_nn9W_local_size[2]),
      .workgroup_size(gemm_nn9W_wg_size),
      .kernel_arguments(gemm_nn9W_kernel_arguments),
      .cra_irq(cra_irq_gemm_nn9W),
      // AVS avs_cra
      .avs_cra_enable(avs_gemm_nn9W_cra_enable),
      .avs_cra_read(avs_gemm_nn9W_cra_read),
      .avs_cra_write(avs_gemm_nn9W_cra_write),
      .avs_cra_address(avs_gemm_nn9W_cra_address),
      .avs_cra_writedata(avs_gemm_nn9W_cra_writedata),
      .avs_cra_byteenable(avs_gemm_nn9W_cra_byteenable),
      .avs_cra_readdata(avs_gemm_nn9W_cra_readdata),
      .avs_cra_readdatavalid(avs_gemm_nn9W_cra_readdatavalid)
   );

   // INST gemm_nn9W_id_iter_inst_0 of acl_id_iterator
   acl_id_iterator
   #(
      .WIDTH(32),
      .LOCAL_WIDTH_X(1),
      .LOCAL_WIDTH_Y(1),
      .LOCAL_WIDTH_Z(1),
      .STALL_OUT_LOOKAHEAD_COUNT(1),
      .VALID_OUT_LOOKAHEAD_COUNT(3),
      .ENABLE_TESSELLATION(0),
      .FAMILY("Cyclone V")
   )
   gemm_nn9W_id_iter_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start(gemm_nn9W_wg_disp_start_out),
      .valid_in(gemm_nn9W_wg_disp_valid_out[0]),
      .stall_out(gemm_nn9W_wg_disp_stall_in[0]),
      .stall_out_lookahead(gemm_nn9W_wg_disp_stall_in_lookahead[0]),
      .stall_in(gemm_nn9W_stall_out[0]),
      .valid_out(gemm_nn9W_valid_in[0]),
      .group_id_in(gemm_nn9W_wg_disp_group_id_out),
      .global_id_base_in(gemm_nn9W_wg_disp_global_id_base_out),
      .local_size(gemm_nn9W_local_size),
      .global_size(gemm_nn9W_global_size),
      .local_id(gemm_nn9W_local_id[0]),
      .global_id(gemm_nn9W_global_id[0]),
      .group_id(gemm_nn9W_group_id[0])
   );

   // INST gemm_nn9W_inst_0 of gemm_nn9W_top_wrapper_0
   gemm_nn9W_top_wrapper_0 gemm_nn9W_inst_0
   (
      .start(gemm_nn9W_start_kernel_copy[0]),
      .kernel_arguments(gemm_nn9W_kernel_arguments),
      .work_dim(gemm_nn9W_work_dim),
      .global_offset(gemm_nn9W_global_offset),
      .kernel_valid_out(gemm_nn9W_valid_out[0]),
      .has_a_write_pending(gemm_nn9W_pending_write[0]),
      .has_a_lsu_active(gemm_nn9W_lsu_active[0]),
      .global_id(gemm_nn9W_global_id[0]),
      .local_id(gemm_nn9W_local_id[0]),
      .group_id(gemm_nn9W_group_id[0]),
      .global_size(gemm_nn9W_global_size),
      .local_size(gemm_nn9W_local_size),
      .num_groups(gemm_nn9W_num_groups),
      .workgroup_size(gemm_nn9W_wg_size),
      .kernel_stall_out(gemm_nn9W_stall_out[0]),
      .kernel_valid_in(gemm_nn9W_valid_in[0]),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_memcoalesce_A_load_0
      .avm_memcoalesce_A_load_0_enable(gemm_nn9W_0_avm_memcoalesce_A_load_0_enable),
      .avm_memcoalesce_A_load_0_read(gemm_nn9W_0_avm_memcoalesce_A_load_0_read),
      .avm_memcoalesce_A_load_0_write(gemm_nn9W_0_avm_memcoalesce_A_load_0_write),
      .avm_memcoalesce_A_load_0_burstcount(gemm_nn9W_0_avm_memcoalesce_A_load_0_burstcount),
      .avm_memcoalesce_A_load_0_address(gemm_nn9W_0_avm_memcoalesce_A_load_0_address),
      .avm_memcoalesce_A_load_0_writedata(gemm_nn9W_0_avm_memcoalesce_A_load_0_writedata),
      .avm_memcoalesce_A_load_0_byteenable(gemm_nn9W_0_avm_memcoalesce_A_load_0_byteenable),
      .avm_memcoalesce_A_load_0_waitrequest(gemm_nn9W_0_avm_memcoalesce_A_load_0_waitrequest),
      .avm_memcoalesce_A_load_0_readdata(gemm_nn9W_0_avm_memcoalesce_A_load_0_readdata),
      .avm_memcoalesce_A_load_0_readdatavalid(gemm_nn9W_0_avm_memcoalesce_A_load_0_readdatavalid),
      .avm_memcoalesce_A_load_0_writeack(gemm_nn9W_0_avm_memcoalesce_A_load_0_writeack),
      // AVM avm_memcoalesce_B_load_0
      .avm_memcoalesce_B_load_0_enable(gemm_nn9W_0_avm_memcoalesce_B_load_0_enable),
      .avm_memcoalesce_B_load_0_read(gemm_nn9W_0_avm_memcoalesce_B_load_0_read),
      .avm_memcoalesce_B_load_0_write(gemm_nn9W_0_avm_memcoalesce_B_load_0_write),
      .avm_memcoalesce_B_load_0_burstcount(gemm_nn9W_0_avm_memcoalesce_B_load_0_burstcount),
      .avm_memcoalesce_B_load_0_address(gemm_nn9W_0_avm_memcoalesce_B_load_0_address),
      .avm_memcoalesce_B_load_0_writedata(gemm_nn9W_0_avm_memcoalesce_B_load_0_writedata),
      .avm_memcoalesce_B_load_0_byteenable(gemm_nn9W_0_avm_memcoalesce_B_load_0_byteenable),
      .avm_memcoalesce_B_load_0_waitrequest(gemm_nn9W_0_avm_memcoalesce_B_load_0_waitrequest),
      .avm_memcoalesce_B_load_0_readdata(gemm_nn9W_0_avm_memcoalesce_B_load_0_readdata),
      .avm_memcoalesce_B_load_0_readdatavalid(gemm_nn9W_0_avm_memcoalesce_B_load_0_readdatavalid),
      .avm_memcoalesce_B_load_0_writeack(gemm_nn9W_0_avm_memcoalesce_B_load_0_writeack),
      // AVM avm_memdep_276
      .avm_memdep_276_enable(gemm_nn9W_0_avm_memdep_276_enable),
      .avm_memdep_276_read(gemm_nn9W_0_avm_memdep_276_read),
      .avm_memdep_276_write(gemm_nn9W_0_avm_memdep_276_write),
      .avm_memdep_276_burstcount(gemm_nn9W_0_avm_memdep_276_burstcount),
      .avm_memdep_276_address(gemm_nn9W_0_avm_memdep_276_address),
      .avm_memdep_276_writedata(gemm_nn9W_0_avm_memdep_276_writedata),
      .avm_memdep_276_byteenable(gemm_nn9W_0_avm_memdep_276_byteenable),
      .avm_memdep_276_waitrequest(gemm_nn9W_0_avm_memdep_276_waitrequest),
      .avm_memdep_276_readdata(gemm_nn9W_0_avm_memdep_276_readdata),
      .avm_memdep_276_readdatavalid(gemm_nn9W_0_avm_memdep_276_readdatavalid),
      .avm_memdep_276_writeack(gemm_nn9W_0_avm_memdep_276_writeack),
      // AVM avm_unnamed_gemm_nn9W2
      .avm_unnamed_gemm_nn9W2_enable(gemm_nn9W_0_avm_unnamed_gemm_nn9W2_enable),
      .avm_unnamed_gemm_nn9W2_read(gemm_nn9W_0_avm_unnamed_gemm_nn9W2_read),
      .avm_unnamed_gemm_nn9W2_write(gemm_nn9W_0_avm_unnamed_gemm_nn9W2_write),
      .avm_unnamed_gemm_nn9W2_burstcount(gemm_nn9W_0_avm_unnamed_gemm_nn9W2_burstcount),
      .avm_unnamed_gemm_nn9W2_address(gemm_nn9W_0_avm_unnamed_gemm_nn9W2_address),
      .avm_unnamed_gemm_nn9W2_writedata(gemm_nn9W_0_avm_unnamed_gemm_nn9W2_writedata),
      .avm_unnamed_gemm_nn9W2_byteenable(gemm_nn9W_0_avm_unnamed_gemm_nn9W2_byteenable),
      .avm_unnamed_gemm_nn9W2_waitrequest(gemm_nn9W_0_avm_unnamed_gemm_nn9W2_waitrequest),
      .avm_unnamed_gemm_nn9W2_readdata(gemm_nn9W_0_avm_unnamed_gemm_nn9W2_readdata),
      .avm_unnamed_gemm_nn9W2_readdatavalid(gemm_nn9W_0_avm_unnamed_gemm_nn9W2_readdatavalid),
      .avm_unnamed_gemm_nn9W2_writeack(gemm_nn9W_0_avm_unnamed_gemm_nn9W2_writeack)
   );

   // INST gemm_nn9W_start_elem_inst_0 of acl_start_signal_chain_element
   acl_start_signal_chain_element
   #(
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0)
   )
   gemm_nn9W_start_elem_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start_in(gemm_nn9W_start_chain[0]),
      .start_kernel(gemm_nn9W_start_kernel_copy[0]),
      .start_finish_detector(gemm_nn9W_start_task_fd[0]),
      .start_finish_chain_element(gemm_nn9W_start_finish_element[0]),
      .start_chain()
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE gemm_nnfW_std_ic_partition_wrapper
/////////////////////////////////////////////////////////////////
module gemm_nnfW_std_ic_partition_wrapper
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   output logic cra_irq_gemm_nnfW,
   // AVS avs_gemm_nnfW_cra
   input logic avs_gemm_nnfW_cra_enable,
   input logic avs_gemm_nnfW_cra_read,
   input logic avs_gemm_nnfW_cra_write,
   input logic [4:0] avs_gemm_nnfW_cra_address,
   input logic [63:0] avs_gemm_nnfW_cra_writedata,
   input logic [7:0] avs_gemm_nnfW_cra_byteenable,
   output logic [63:0] avs_gemm_nnfW_cra_readdata,
   output logic avs_gemm_nnfW_cra_readdatavalid,
   // AVM gemm_nnfW_0_avm_memcoalesce_A_load_0
   output logic gemm_nnfW_0_avm_memcoalesce_A_load_0_enable,
   output logic gemm_nnfW_0_avm_memcoalesce_A_load_0_read,
   output logic gemm_nnfW_0_avm_memcoalesce_A_load_0_write,
   output logic [4:0] gemm_nnfW_0_avm_memcoalesce_A_load_0_burstcount,
   output logic [29:0] gemm_nnfW_0_avm_memcoalesce_A_load_0_address,
   output logic [255:0] gemm_nnfW_0_avm_memcoalesce_A_load_0_writedata,
   output logic [31:0] gemm_nnfW_0_avm_memcoalesce_A_load_0_byteenable,
   input logic gemm_nnfW_0_avm_memcoalesce_A_load_0_waitrequest,
   input logic [255:0] gemm_nnfW_0_avm_memcoalesce_A_load_0_readdata,
   input logic gemm_nnfW_0_avm_memcoalesce_A_load_0_readdatavalid,
   input logic gemm_nnfW_0_avm_memcoalesce_A_load_0_writeack,
   // AVM gemm_nnfW_0_avm_memcoalesce_B_load_0
   output logic gemm_nnfW_0_avm_memcoalesce_B_load_0_enable,
   output logic gemm_nnfW_0_avm_memcoalesce_B_load_0_read,
   output logic gemm_nnfW_0_avm_memcoalesce_B_load_0_write,
   output logic [4:0] gemm_nnfW_0_avm_memcoalesce_B_load_0_burstcount,
   output logic [29:0] gemm_nnfW_0_avm_memcoalesce_B_load_0_address,
   output logic [255:0] gemm_nnfW_0_avm_memcoalesce_B_load_0_writedata,
   output logic [31:0] gemm_nnfW_0_avm_memcoalesce_B_load_0_byteenable,
   input logic gemm_nnfW_0_avm_memcoalesce_B_load_0_waitrequest,
   input logic [255:0] gemm_nnfW_0_avm_memcoalesce_B_load_0_readdata,
   input logic gemm_nnfW_0_avm_memcoalesce_B_load_0_readdatavalid,
   input logic gemm_nnfW_0_avm_memcoalesce_B_load_0_writeack,
   // AVM gemm_nnfW_0_avm_memdep_5
   output logic gemm_nnfW_0_avm_memdep_5_enable,
   output logic gemm_nnfW_0_avm_memdep_5_read,
   output logic gemm_nnfW_0_avm_memdep_5_write,
   output logic [4:0] gemm_nnfW_0_avm_memdep_5_burstcount,
   output logic [29:0] gemm_nnfW_0_avm_memdep_5_address,
   output logic [255:0] gemm_nnfW_0_avm_memdep_5_writedata,
   output logic [31:0] gemm_nnfW_0_avm_memdep_5_byteenable,
   input logic gemm_nnfW_0_avm_memdep_5_waitrequest,
   input logic [255:0] gemm_nnfW_0_avm_memdep_5_readdata,
   input logic gemm_nnfW_0_avm_memdep_5_readdatavalid,
   input logic gemm_nnfW_0_avm_memdep_5_writeack,
   // AVM gemm_nnfW_0_avm_unnamed_gemm_nnfW5
   output logic gemm_nnfW_0_avm_unnamed_gemm_nnfW5_enable,
   output logic gemm_nnfW_0_avm_unnamed_gemm_nnfW5_read,
   output logic gemm_nnfW_0_avm_unnamed_gemm_nnfW5_write,
   output logic [4:0] gemm_nnfW_0_avm_unnamed_gemm_nnfW5_burstcount,
   output logic [29:0] gemm_nnfW_0_avm_unnamed_gemm_nnfW5_address,
   output logic [255:0] gemm_nnfW_0_avm_unnamed_gemm_nnfW5_writedata,
   output logic [31:0] gemm_nnfW_0_avm_unnamed_gemm_nnfW5_byteenable,
   input logic gemm_nnfW_0_avm_unnamed_gemm_nnfW5_waitrequest,
   input logic [255:0] gemm_nnfW_0_avm_unnamed_gemm_nnfW5_readdata,
   input logic gemm_nnfW_0_avm_unnamed_gemm_nnfW5_readdatavalid,
   input logic gemm_nnfW_0_avm_unnamed_gemm_nnfW5_writeack
);
   logic gemm_nnfW_start;
   logic [0:0] gemm_nnfW_start_chain;
   logic [0:0] gemm_nnfW_start_kernel_copy;
   logic [0:0] gemm_nnfW_start_task_fd;
   logic [0:0] gemm_nnfW_start_finish_element;
   logic gemm_nnfW_finish;
   logic [0:0] gemm_nnfW_finish_kernel_copy;
   logic [0:0] gemm_nnfW_finish_chain;
   logic [31:0] gemm_nnfW_global_size [2:0];
   logic [31:0] gemm_nnfW_num_groups [2:0];
   logic [31:0] gemm_nnfW_local_size [2:0];
   logic [31:0] gemm_nnfW_global_offset [2:0];
   logic [31:0] gemm_nnfW_work_dim;
   logic [31:0] gemm_nnfW_wg_size;
   logic [0:0] gemm_nnfW_wg_disp_stall_in;
   logic [0:0] gemm_nnfW_wg_disp_stall_in_lookahead;
   logic [0:0] gemm_nnfW_wg_disp_valid_out;
   logic gemm_nnfW_wg_disp_start_out;
   logic [31:0] gemm_nnfW_wg_disp_group_id_out [2:0];
   logic [31:0] gemm_nnfW_wg_disp_global_id_base_out [2:0];
   logic gemm_nnfW_wg_disp_dispatched_all_groups;
   logic [31:0] gemm_nnfW_global_id [1][2:0];
   logic [31:0] gemm_nnfW_local_id [1][2:0];
   logic [31:0] gemm_nnfW_group_id [1][2:0];
   logic [0:0] gemm_nnfW_pending_write;
   logic [0:0] gemm_nnfW_lsu_active;
   logic [0:0] gemm_nnfW_valid_in;
   logic [0:0] gemm_nnfW_valid_out;
   logic [0:0] gemm_nnfW_stall_in;
   logic [0:0] gemm_nnfW_stall_out;
   logic gemm_nnfW_cra_pending_write;
   logic gemm_nnfW_cra_lsu_active;
   logic gemm_nnfW_cra_valid_in;
   logic [415:0] gemm_nnfW_kernel_arguments;

   assign gemm_nnfW_start_chain[0] = gemm_nnfW_start;
   assign gemm_nnfW_finish_chain[0] = 1'b1;
   assign gemm_nnfW_cra_pending_write = |gemm_nnfW_pending_write;
   assign gemm_nnfW_cra_lsu_active = |gemm_nnfW_lsu_active;
   assign gemm_nnfW_cra_valid_in = |gemm_nnfW_valid_in;
   assign gemm_nnfW_stall_in = 0;
   // INST gemm_nnfW_workgroup_dispatcher of acl_work_group_dispatcher
   acl_work_group_dispatcher
   #(
      .WIDTH(32),
      .NUM_COPIES(1),
      .RUN_FOREVER(0),
      .FAMILY("Cyclone V")
   )
   gemm_nnfW_workgroup_dispatcher
   (
      .clock(clock),
      .resetn(resetn),
      .start(gemm_nnfW_start),
      .num_groups(gemm_nnfW_num_groups),
      .local_size(gemm_nnfW_local_size),
      .stall_in(gemm_nnfW_wg_disp_stall_in),
      .stall_in_lookahead(gemm_nnfW_wg_disp_stall_in_lookahead),
      .valid_out(gemm_nnfW_wg_disp_valid_out),
      .group_id_out(gemm_nnfW_wg_disp_group_id_out),
      .global_id_base_out(gemm_nnfW_wg_disp_global_id_base_out),
      .start_out(gemm_nnfW_wg_disp_start_out),
      .dispatched_all_groups(gemm_nnfW_wg_disp_dispatched_all_groups)
   );

   // INST gemm_nnfW_finish_detector of acl_kernel_finish_detector
   acl_kernel_finish_detector
   #(
      .NUM_COPIES(1),
      .WG_SIZE_W(32),
      .GLOBAL_ID_W(32),
      .TESSELLATION_SIZE(0),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0)
   )
   gemm_nnfW_finish_detector
   (
      .clock(clock),
      .resetn(resetn),
      .start(gemm_nnfW_start),
      .wg_size(gemm_nnfW_wg_size),
      .wg_dispatch_valid_out(gemm_nnfW_wg_disp_valid_out),
      .wg_dispatch_stall_in(gemm_nnfW_wg_disp_stall_in),
      .dispatched_all_groups(gemm_nnfW_wg_disp_dispatched_all_groups),
      .kernel_copy_valid_out(gemm_nnfW_valid_out),
      .kernel_copy_stall_in(gemm_nnfW_stall_in),
      .pending_writes(gemm_nnfW_cra_pending_write),
      .finish(gemm_nnfW_finish)
   );

   // INST gemm_nnfW_cra_slave_inst of gemm_nnfW_function_cra_slave
   gemm_nnfW_function_cra_slave gemm_nnfW_cra_slave_inst
   (
      .clock(clock),
      .resetn(resetn),
      .start(gemm_nnfW_start),
      .finish(gemm_nnfW_finish),
      .global_offset_0(gemm_nnfW_global_offset[0]),
      .global_offset_1(gemm_nnfW_global_offset[1]),
      .global_offset_2(gemm_nnfW_global_offset[2]),
      .work_dim(gemm_nnfW_work_dim),
      .has_a_lsu_active(gemm_nnfW_cra_lsu_active),
      .has_a_write_pending(gemm_nnfW_cra_pending_write),
      .valid_in(gemm_nnfW_cra_valid_in),
      .global_size_0(gemm_nnfW_global_size[0]),
      .global_size_1(gemm_nnfW_global_size[1]),
      .global_size_2(gemm_nnfW_global_size[2]),
      .num_groups_0(gemm_nnfW_num_groups[0]),
      .num_groups_1(gemm_nnfW_num_groups[1]),
      .num_groups_2(gemm_nnfW_num_groups[2]),
      .local_size_0(gemm_nnfW_local_size[0]),
      .local_size_1(gemm_nnfW_local_size[1]),
      .local_size_2(gemm_nnfW_local_size[2]),
      .workgroup_size(gemm_nnfW_wg_size),
      .kernel_arguments(gemm_nnfW_kernel_arguments),
      .cra_irq(cra_irq_gemm_nnfW),
      // AVS avs_cra
      .avs_cra_enable(avs_gemm_nnfW_cra_enable),
      .avs_cra_read(avs_gemm_nnfW_cra_read),
      .avs_cra_write(avs_gemm_nnfW_cra_write),
      .avs_cra_address(avs_gemm_nnfW_cra_address),
      .avs_cra_writedata(avs_gemm_nnfW_cra_writedata),
      .avs_cra_byteenable(avs_gemm_nnfW_cra_byteenable),
      .avs_cra_readdata(avs_gemm_nnfW_cra_readdata),
      .avs_cra_readdatavalid(avs_gemm_nnfW_cra_readdatavalid)
   );

   // INST gemm_nnfW_id_iter_inst_0 of acl_id_iterator
   acl_id_iterator
   #(
      .WIDTH(32),
      .LOCAL_WIDTH_X(1),
      .LOCAL_WIDTH_Y(1),
      .LOCAL_WIDTH_Z(1),
      .STALL_OUT_LOOKAHEAD_COUNT(1),
      .VALID_OUT_LOOKAHEAD_COUNT(3),
      .ENABLE_TESSELLATION(0),
      .FAMILY("Cyclone V")
   )
   gemm_nnfW_id_iter_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start(gemm_nnfW_wg_disp_start_out),
      .valid_in(gemm_nnfW_wg_disp_valid_out[0]),
      .stall_out(gemm_nnfW_wg_disp_stall_in[0]),
      .stall_out_lookahead(gemm_nnfW_wg_disp_stall_in_lookahead[0]),
      .stall_in(gemm_nnfW_stall_out[0]),
      .valid_out(gemm_nnfW_valid_in[0]),
      .group_id_in(gemm_nnfW_wg_disp_group_id_out),
      .global_id_base_in(gemm_nnfW_wg_disp_global_id_base_out),
      .local_size(gemm_nnfW_local_size),
      .global_size(gemm_nnfW_global_size),
      .local_id(gemm_nnfW_local_id[0]),
      .global_id(gemm_nnfW_global_id[0]),
      .group_id(gemm_nnfW_group_id[0])
   );

   // INST gemm_nnfW_inst_0 of gemm_nnfW_top_wrapper_0
   gemm_nnfW_top_wrapper_0 gemm_nnfW_inst_0
   (
      .start(gemm_nnfW_start_kernel_copy[0]),
      .kernel_arguments(gemm_nnfW_kernel_arguments),
      .work_dim(gemm_nnfW_work_dim),
      .global_offset(gemm_nnfW_global_offset),
      .kernel_valid_out(gemm_nnfW_valid_out[0]),
      .has_a_write_pending(gemm_nnfW_pending_write[0]),
      .has_a_lsu_active(gemm_nnfW_lsu_active[0]),
      .global_id(gemm_nnfW_global_id[0]),
      .local_id(gemm_nnfW_local_id[0]),
      .group_id(gemm_nnfW_group_id[0]),
      .global_size(gemm_nnfW_global_size),
      .local_size(gemm_nnfW_local_size),
      .num_groups(gemm_nnfW_num_groups),
      .workgroup_size(gemm_nnfW_wg_size),
      .kernel_stall_out(gemm_nnfW_stall_out[0]),
      .kernel_valid_in(gemm_nnfW_valid_in[0]),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_memcoalesce_A_load_0
      .avm_memcoalesce_A_load_0_enable(gemm_nnfW_0_avm_memcoalesce_A_load_0_enable),
      .avm_memcoalesce_A_load_0_read(gemm_nnfW_0_avm_memcoalesce_A_load_0_read),
      .avm_memcoalesce_A_load_0_write(gemm_nnfW_0_avm_memcoalesce_A_load_0_write),
      .avm_memcoalesce_A_load_0_burstcount(gemm_nnfW_0_avm_memcoalesce_A_load_0_burstcount),
      .avm_memcoalesce_A_load_0_address(gemm_nnfW_0_avm_memcoalesce_A_load_0_address),
      .avm_memcoalesce_A_load_0_writedata(gemm_nnfW_0_avm_memcoalesce_A_load_0_writedata),
      .avm_memcoalesce_A_load_0_byteenable(gemm_nnfW_0_avm_memcoalesce_A_load_0_byteenable),
      .avm_memcoalesce_A_load_0_waitrequest(gemm_nnfW_0_avm_memcoalesce_A_load_0_waitrequest),
      .avm_memcoalesce_A_load_0_readdata(gemm_nnfW_0_avm_memcoalesce_A_load_0_readdata),
      .avm_memcoalesce_A_load_0_readdatavalid(gemm_nnfW_0_avm_memcoalesce_A_load_0_readdatavalid),
      .avm_memcoalesce_A_load_0_writeack(gemm_nnfW_0_avm_memcoalesce_A_load_0_writeack),
      // AVM avm_memcoalesce_B_load_0
      .avm_memcoalesce_B_load_0_enable(gemm_nnfW_0_avm_memcoalesce_B_load_0_enable),
      .avm_memcoalesce_B_load_0_read(gemm_nnfW_0_avm_memcoalesce_B_load_0_read),
      .avm_memcoalesce_B_load_0_write(gemm_nnfW_0_avm_memcoalesce_B_load_0_write),
      .avm_memcoalesce_B_load_0_burstcount(gemm_nnfW_0_avm_memcoalesce_B_load_0_burstcount),
      .avm_memcoalesce_B_load_0_address(gemm_nnfW_0_avm_memcoalesce_B_load_0_address),
      .avm_memcoalesce_B_load_0_writedata(gemm_nnfW_0_avm_memcoalesce_B_load_0_writedata),
      .avm_memcoalesce_B_load_0_byteenable(gemm_nnfW_0_avm_memcoalesce_B_load_0_byteenable),
      .avm_memcoalesce_B_load_0_waitrequest(gemm_nnfW_0_avm_memcoalesce_B_load_0_waitrequest),
      .avm_memcoalesce_B_load_0_readdata(gemm_nnfW_0_avm_memcoalesce_B_load_0_readdata),
      .avm_memcoalesce_B_load_0_readdatavalid(gemm_nnfW_0_avm_memcoalesce_B_load_0_readdatavalid),
      .avm_memcoalesce_B_load_0_writeack(gemm_nnfW_0_avm_memcoalesce_B_load_0_writeack),
      // AVM avm_memdep_5
      .avm_memdep_5_enable(gemm_nnfW_0_avm_memdep_5_enable),
      .avm_memdep_5_read(gemm_nnfW_0_avm_memdep_5_read),
      .avm_memdep_5_write(gemm_nnfW_0_avm_memdep_5_write),
      .avm_memdep_5_burstcount(gemm_nnfW_0_avm_memdep_5_burstcount),
      .avm_memdep_5_address(gemm_nnfW_0_avm_memdep_5_address),
      .avm_memdep_5_writedata(gemm_nnfW_0_avm_memdep_5_writedata),
      .avm_memdep_5_byteenable(gemm_nnfW_0_avm_memdep_5_byteenable),
      .avm_memdep_5_waitrequest(gemm_nnfW_0_avm_memdep_5_waitrequest),
      .avm_memdep_5_readdata(gemm_nnfW_0_avm_memdep_5_readdata),
      .avm_memdep_5_readdatavalid(gemm_nnfW_0_avm_memdep_5_readdatavalid),
      .avm_memdep_5_writeack(gemm_nnfW_0_avm_memdep_5_writeack),
      // AVM avm_unnamed_gemm_nnfW5
      .avm_unnamed_gemm_nnfW5_enable(gemm_nnfW_0_avm_unnamed_gemm_nnfW5_enable),
      .avm_unnamed_gemm_nnfW5_read(gemm_nnfW_0_avm_unnamed_gemm_nnfW5_read),
      .avm_unnamed_gemm_nnfW5_write(gemm_nnfW_0_avm_unnamed_gemm_nnfW5_write),
      .avm_unnamed_gemm_nnfW5_burstcount(gemm_nnfW_0_avm_unnamed_gemm_nnfW5_burstcount),
      .avm_unnamed_gemm_nnfW5_address(gemm_nnfW_0_avm_unnamed_gemm_nnfW5_address),
      .avm_unnamed_gemm_nnfW5_writedata(gemm_nnfW_0_avm_unnamed_gemm_nnfW5_writedata),
      .avm_unnamed_gemm_nnfW5_byteenable(gemm_nnfW_0_avm_unnamed_gemm_nnfW5_byteenable),
      .avm_unnamed_gemm_nnfW5_waitrequest(gemm_nnfW_0_avm_unnamed_gemm_nnfW5_waitrequest),
      .avm_unnamed_gemm_nnfW5_readdata(gemm_nnfW_0_avm_unnamed_gemm_nnfW5_readdata),
      .avm_unnamed_gemm_nnfW5_readdatavalid(gemm_nnfW_0_avm_unnamed_gemm_nnfW5_readdatavalid),
      .avm_unnamed_gemm_nnfW5_writeack(gemm_nnfW_0_avm_unnamed_gemm_nnfW5_writeack)
   );

   // INST gemm_nnfW_start_elem_inst_0 of acl_start_signal_chain_element
   acl_start_signal_chain_element
   #(
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0)
   )
   gemm_nnfW_start_elem_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start_in(gemm_nnfW_start_chain[0]),
      .start_kernel(gemm_nnfW_start_kernel_copy[0]),
      .start_finish_detector(gemm_nnfW_start_task_fd[0]),
      .start_finish_chain_element(gemm_nnfW_start_finish_element[0]),
      .start_chain()
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE gemm_nn9W_top_wrapper_0
/////////////////////////////////////////////////////////////////
module gemm_nn9W_top_wrapper_0
(
   input logic start,
   input logic [415:0] kernel_arguments,
   input logic [31:0] work_dim,
   input logic [31:0] global_offset [2:0],
   output logic kernel_valid_out,
   output logic has_a_write_pending,
   output logic has_a_lsu_active,
   input logic [31:0] global_id [2:0],
   input logic [31:0] local_id [2:0],
   input logic [31:0] group_id [2:0],
   input logic [31:0] global_size [2:0],
   input logic [31:0] local_size [2:0],
   input logic [31:0] num_groups [2:0],
   input logic [31:0] workgroup_size,
   output logic kernel_stall_out,
   input logic kernel_valid_in,
   input logic clock,
   input logic resetn,
   input logic clock2x,
   // AVM avm_memcoalesce_A_load_0
   output logic avm_memcoalesce_A_load_0_enable,
   output logic avm_memcoalesce_A_load_0_read,
   output logic avm_memcoalesce_A_load_0_write,
   output logic [4:0] avm_memcoalesce_A_load_0_burstcount,
   output logic [29:0] avm_memcoalesce_A_load_0_address,
   output logic [255:0] avm_memcoalesce_A_load_0_writedata,
   output logic [31:0] avm_memcoalesce_A_load_0_byteenable,
   input logic avm_memcoalesce_A_load_0_waitrequest,
   input logic [255:0] avm_memcoalesce_A_load_0_readdata,
   input logic avm_memcoalesce_A_load_0_readdatavalid,
   input logic avm_memcoalesce_A_load_0_writeack,
   // AVM avm_memcoalesce_B_load_0
   output logic avm_memcoalesce_B_load_0_enable,
   output logic avm_memcoalesce_B_load_0_read,
   output logic avm_memcoalesce_B_load_0_write,
   output logic [4:0] avm_memcoalesce_B_load_0_burstcount,
   output logic [29:0] avm_memcoalesce_B_load_0_address,
   output logic [255:0] avm_memcoalesce_B_load_0_writedata,
   output logic [31:0] avm_memcoalesce_B_load_0_byteenable,
   input logic avm_memcoalesce_B_load_0_waitrequest,
   input logic [255:0] avm_memcoalesce_B_load_0_readdata,
   input logic avm_memcoalesce_B_load_0_readdatavalid,
   input logic avm_memcoalesce_B_load_0_writeack,
   // AVM avm_memdep_276
   output logic avm_memdep_276_enable,
   output logic avm_memdep_276_read,
   output logic avm_memdep_276_write,
   output logic [4:0] avm_memdep_276_burstcount,
   output logic [29:0] avm_memdep_276_address,
   output logic [255:0] avm_memdep_276_writedata,
   output logic [31:0] avm_memdep_276_byteenable,
   input logic avm_memdep_276_waitrequest,
   input logic [255:0] avm_memdep_276_readdata,
   input logic avm_memdep_276_readdatavalid,
   input logic avm_memdep_276_writeack,
   // AVM avm_unnamed_gemm_nn9W2
   output logic avm_unnamed_gemm_nn9W2_enable,
   output logic avm_unnamed_gemm_nn9W2_read,
   output logic avm_unnamed_gemm_nn9W2_write,
   output logic [4:0] avm_unnamed_gemm_nn9W2_burstcount,
   output logic [29:0] avm_unnamed_gemm_nn9W2_address,
   output logic [255:0] avm_unnamed_gemm_nn9W2_writedata,
   output logic [31:0] avm_unnamed_gemm_nn9W2_byteenable,
   input logic avm_unnamed_gemm_nn9W2_waitrequest,
   input logic [255:0] avm_unnamed_gemm_nn9W2_readdata,
   input logic avm_unnamed_gemm_nn9W2_readdatavalid,
   input logic avm_unnamed_gemm_nn9W2_writeack
);
   genvar __i;
   genvar __j;
   logic lmem_invalid_single_bit;
   logic lmem_invalid_aspaces;
   logic local_avm_aspace5_enable [1][6];
   logic local_avm_aspace5_read [1][6];
   logic local_avm_aspace5_write [1][6];
   logic local_avm_aspace5_burstcount [1][6];
   logic [31:0] local_avm_aspace5_address [1][6];
   logic [127:0] local_avm_aspace5_writedata [1][6];
   logic [15:0] local_avm_aspace5_byteenable [1][6];
   logic local_avm_aspace5_waitrequest [1][6];
   logic [127:0] local_avm_aspace5_readdata [1][6];
   logic local_avm_aspace5_readdatavalid [1][6];
   logic local_avm_aspace5_writeack [1][6];

   // INST kernel of gemm_nn9W_function_wrapper
   gemm_nn9W_function_wrapper kernel
   (
      .local_router_hang(lmem_invalid_single_bit),
      .start(start),
      .kernel_arguments(kernel_arguments),
      .work_dim(work_dim),
      .global_offset_0(global_offset[0]),
      .global_offset_1(global_offset[1]),
      .global_offset_2(global_offset[2]),
      .kernel_valid_out(kernel_valid_out),
      .has_a_write_pending(has_a_write_pending),
      .has_a_lsu_active(has_a_lsu_active),
      .global_id_0(global_id[0]),
      .global_id_1(global_id[1]),
      .global_id_2(global_id[2]),
      .local_id_0(local_id[0]),
      .local_id_1(local_id[1]),
      .local_id_2(local_id[2]),
      .group_id_0(group_id[0]),
      .group_id_1(group_id[1]),
      .group_id_2(group_id[2]),
      .global_size_0(global_size[0]),
      .global_size_1(global_size[1]),
      .global_size_2(global_size[2]),
      .local_size_0(local_size[0]),
      .local_size_1(local_size[1]),
      .local_size_2(local_size[2]),
      .num_groups_0(num_groups[0]),
      .num_groups_1(num_groups[1]),
      .num_groups_2(num_groups[2]),
      .workgroup_size(workgroup_size),
      .kernel_stall_out(kernel_stall_out),
      .kernel_valid_in(kernel_valid_in),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_memcoalesce_A_load_0
      .avm_memcoalesce_A_load_0_enable(avm_memcoalesce_A_load_0_enable),
      .avm_memcoalesce_A_load_0_read(avm_memcoalesce_A_load_0_read),
      .avm_memcoalesce_A_load_0_write(avm_memcoalesce_A_load_0_write),
      .avm_memcoalesce_A_load_0_burstcount(avm_memcoalesce_A_load_0_burstcount),
      .avm_memcoalesce_A_load_0_address(avm_memcoalesce_A_load_0_address),
      .avm_memcoalesce_A_load_0_writedata(avm_memcoalesce_A_load_0_writedata),
      .avm_memcoalesce_A_load_0_byteenable(avm_memcoalesce_A_load_0_byteenable),
      .avm_memcoalesce_A_load_0_waitrequest(avm_memcoalesce_A_load_0_waitrequest),
      .avm_memcoalesce_A_load_0_readdata(avm_memcoalesce_A_load_0_readdata),
      .avm_memcoalesce_A_load_0_readdatavalid(avm_memcoalesce_A_load_0_readdatavalid),
      .avm_memcoalesce_A_load_0_writeack(avm_memcoalesce_A_load_0_writeack),
      // AVM avm_memcoalesce_B_load_0
      .avm_memcoalesce_B_load_0_enable(avm_memcoalesce_B_load_0_enable),
      .avm_memcoalesce_B_load_0_read(avm_memcoalesce_B_load_0_read),
      .avm_memcoalesce_B_load_0_write(avm_memcoalesce_B_load_0_write),
      .avm_memcoalesce_B_load_0_burstcount(avm_memcoalesce_B_load_0_burstcount),
      .avm_memcoalesce_B_load_0_address(avm_memcoalesce_B_load_0_address),
      .avm_memcoalesce_B_load_0_writedata(avm_memcoalesce_B_load_0_writedata),
      .avm_memcoalesce_B_load_0_byteenable(avm_memcoalesce_B_load_0_byteenable),
      .avm_memcoalesce_B_load_0_waitrequest(avm_memcoalesce_B_load_0_waitrequest),
      .avm_memcoalesce_B_load_0_readdata(avm_memcoalesce_B_load_0_readdata),
      .avm_memcoalesce_B_load_0_readdatavalid(avm_memcoalesce_B_load_0_readdatavalid),
      .avm_memcoalesce_B_load_0_writeack(avm_memcoalesce_B_load_0_writeack),
      // AVM avm_memdep_276
      .avm_memdep_276_enable(avm_memdep_276_enable),
      .avm_memdep_276_read(avm_memdep_276_read),
      .avm_memdep_276_write(avm_memdep_276_write),
      .avm_memdep_276_burstcount(avm_memdep_276_burstcount),
      .avm_memdep_276_address(avm_memdep_276_address),
      .avm_memdep_276_writedata(avm_memdep_276_writedata),
      .avm_memdep_276_byteenable(avm_memdep_276_byteenable),
      .avm_memdep_276_waitrequest(avm_memdep_276_waitrequest),
      .avm_memdep_276_readdata(avm_memdep_276_readdata),
      .avm_memdep_276_readdatavalid(avm_memdep_276_readdatavalid),
      .avm_memdep_276_writeack(avm_memdep_276_writeack),
      // AVM avm_unnamed_gemm_nn9W2
      .avm_unnamed_gemm_nn9W2_enable(avm_unnamed_gemm_nn9W2_enable),
      .avm_unnamed_gemm_nn9W2_read(avm_unnamed_gemm_nn9W2_read),
      .avm_unnamed_gemm_nn9W2_write(avm_unnamed_gemm_nn9W2_write),
      .avm_unnamed_gemm_nn9W2_burstcount(avm_unnamed_gemm_nn9W2_burstcount),
      .avm_unnamed_gemm_nn9W2_address(avm_unnamed_gemm_nn9W2_address),
      .avm_unnamed_gemm_nn9W2_writedata(avm_unnamed_gemm_nn9W2_writedata),
      .avm_unnamed_gemm_nn9W2_byteenable(avm_unnamed_gemm_nn9W2_byteenable),
      .avm_unnamed_gemm_nn9W2_waitrequest(avm_unnamed_gemm_nn9W2_waitrequest),
      .avm_unnamed_gemm_nn9W2_readdata(avm_unnamed_gemm_nn9W2_readdata),
      .avm_unnamed_gemm_nn9W2_readdatavalid(avm_unnamed_gemm_nn9W2_readdatavalid),
      .avm_unnamed_gemm_nn9W2_writeack(avm_unnamed_gemm_nn9W2_writeack),
      // AVM avm_memcoalesce_null_load_0
      .avm_memcoalesce_null_load_0_enable(local_avm_aspace5_enable[0][0]),
      .avm_memcoalesce_null_load_0_read(local_avm_aspace5_read[0][0]),
      .avm_memcoalesce_null_load_0_write(local_avm_aspace5_write[0][0]),
      .avm_memcoalesce_null_load_0_burstcount(local_avm_aspace5_burstcount[0][0]),
      .avm_memcoalesce_null_load_0_address(local_avm_aspace5_address[0][0]),
      .avm_memcoalesce_null_load_0_writedata(local_avm_aspace5_writedata[0][0]),
      .avm_memcoalesce_null_load_0_byteenable(local_avm_aspace5_byteenable[0][0]),
      .avm_memcoalesce_null_load_0_waitrequest(local_avm_aspace5_waitrequest[0][0]),
      .avm_memcoalesce_null_load_0_readdata(local_avm_aspace5_readdata[0][0]),
      .avm_memcoalesce_null_load_0_readdatavalid(local_avm_aspace5_readdatavalid[0][0]),
      .avm_memcoalesce_null_load_0_writeack(local_avm_aspace5_writeack[0][0]),
      // AVM avm_memcoalesce_null_load_045
      .avm_memcoalesce_null_load_045_enable(local_avm_aspace5_enable[0][1]),
      .avm_memcoalesce_null_load_045_read(local_avm_aspace5_read[0][1]),
      .avm_memcoalesce_null_load_045_write(local_avm_aspace5_write[0][1]),
      .avm_memcoalesce_null_load_045_burstcount(local_avm_aspace5_burstcount[0][1]),
      .avm_memcoalesce_null_load_045_address(local_avm_aspace5_address[0][1]),
      .avm_memcoalesce_null_load_045_writedata(local_avm_aspace5_writedata[0][1]),
      .avm_memcoalesce_null_load_045_byteenable(local_avm_aspace5_byteenable[0][1]),
      .avm_memcoalesce_null_load_045_waitrequest(local_avm_aspace5_waitrequest[0][1]),
      .avm_memcoalesce_null_load_045_readdata(local_avm_aspace5_readdata[0][1]),
      .avm_memcoalesce_null_load_045_readdatavalid(local_avm_aspace5_readdatavalid[0][1]),
      .avm_memcoalesce_null_load_045_writeack(local_avm_aspace5_writeack[0][1]),
      // AVM avm_memcoalesce_null_load_051
      .avm_memcoalesce_null_load_051_enable(local_avm_aspace5_enable[0][2]),
      .avm_memcoalesce_null_load_051_read(local_avm_aspace5_read[0][2]),
      .avm_memcoalesce_null_load_051_write(local_avm_aspace5_write[0][2]),
      .avm_memcoalesce_null_load_051_burstcount(local_avm_aspace5_burstcount[0][2]),
      .avm_memcoalesce_null_load_051_address(local_avm_aspace5_address[0][2]),
      .avm_memcoalesce_null_load_051_writedata(local_avm_aspace5_writedata[0][2]),
      .avm_memcoalesce_null_load_051_byteenable(local_avm_aspace5_byteenable[0][2]),
      .avm_memcoalesce_null_load_051_waitrequest(local_avm_aspace5_waitrequest[0][2]),
      .avm_memcoalesce_null_load_051_readdata(local_avm_aspace5_readdata[0][2]),
      .avm_memcoalesce_null_load_051_readdatavalid(local_avm_aspace5_readdatavalid[0][2]),
      .avm_memcoalesce_null_load_051_writeack(local_avm_aspace5_writeack[0][2]),
      // AVM avm_memdep
      .avm_memdep_enable(local_avm_aspace5_enable[0][3]),
      .avm_memdep_read(local_avm_aspace5_read[0][3]),
      .avm_memdep_write(local_avm_aspace5_write[0][3]),
      .avm_memdep_burstcount(local_avm_aspace5_burstcount[0][3]),
      .avm_memdep_address(local_avm_aspace5_address[0][3]),
      .avm_memdep_writedata(local_avm_aspace5_writedata[0][3]),
      .avm_memdep_byteenable(local_avm_aspace5_byteenable[0][3]),
      .avm_memdep_waitrequest(local_avm_aspace5_waitrequest[0][3]),
      .avm_memdep_readdata(local_avm_aspace5_readdata[0][3]),
      .avm_memdep_readdatavalid(local_avm_aspace5_readdatavalid[0][3]),
      .avm_memdep_writeack(local_avm_aspace5_writeack[0][3]),
      // AVM avm_memdep_259
      .avm_memdep_259_enable(local_avm_aspace5_enable[0][4]),
      .avm_memdep_259_read(local_avm_aspace5_read[0][4]),
      .avm_memdep_259_write(local_avm_aspace5_write[0][4]),
      .avm_memdep_259_burstcount(local_avm_aspace5_burstcount[0][4]),
      .avm_memdep_259_address(local_avm_aspace5_address[0][4]),
      .avm_memdep_259_writedata(local_avm_aspace5_writedata[0][4]),
      .avm_memdep_259_byteenable(local_avm_aspace5_byteenable[0][4]),
      .avm_memdep_259_waitrequest(local_avm_aspace5_waitrequest[0][4]),
      .avm_memdep_259_readdata(local_avm_aspace5_readdata[0][4]),
      .avm_memdep_259_readdatavalid(local_avm_aspace5_readdatavalid[0][4]),
      .avm_memdep_259_writeack(local_avm_aspace5_writeack[0][4]),
      // AVM avm_memdep_264
      .avm_memdep_264_enable(local_avm_aspace5_enable[0][5]),
      .avm_memdep_264_read(local_avm_aspace5_read[0][5]),
      .avm_memdep_264_write(local_avm_aspace5_write[0][5]),
      .avm_memdep_264_burstcount(local_avm_aspace5_burstcount[0][5]),
      .avm_memdep_264_address(local_avm_aspace5_address[0][5]),
      .avm_memdep_264_writedata(local_avm_aspace5_writedata[0][5]),
      .avm_memdep_264_byteenable(local_avm_aspace5_byteenable[0][5]),
      .avm_memdep_264_waitrequest(local_avm_aspace5_waitrequest[0][5]),
      .avm_memdep_264_readdata(local_avm_aspace5_readdata[0][5]),
      .avm_memdep_264_readdatavalid(local_avm_aspace5_readdatavalid[0][5]),
      .avm_memdep_264_writeack(local_avm_aspace5_writeack[0][5])
   );

   assign lmem_invalid_single_bit = |lmem_invalid_aspaces;
   generate
   begin:local_mem_system_aspace5
      logic local_icm_arb_request [1][6];
      logic local_icm_arb_enable [1][6];
      logic local_icm_arb_read [1][6];
      logic local_icm_arb_write [1][6];
      logic local_icm_arb_burstcount [1][6];
      logic [10:0] local_icm_arb_address [1][6];
      logic [127:0] local_icm_arb_writedata [1][6];
      logic [15:0] local_icm_arb_byteenable [1][6];
      logic local_icm_arb_stall [1][6];
      logic local_icm_wrp_ack [1][6];
      logic local_icm_rrp_datavalid [1][6];
      logic [127:0] local_icm_rrp_data [1][6];

      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:local_mem_group
         for( __j = 0; __j < 6; __j = __j + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(128),
               .WRITEDATA_W(128),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(16)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace5_enable[__i][__j]),
               .avm_read(local_avm_aspace5_read[__i][__j]),
               .avm_write(local_avm_aspace5_write[__i][__j]),
               .avm_burstcount(local_avm_aspace5_burstcount[__i][__j]),
               .avm_address(local_avm_aspace5_address[__i][__j]),
               .avm_writedata(local_avm_aspace5_writedata[__i][__j]),
               .avm_byteenable(local_avm_aspace5_byteenable[__i][__j]),
               .avm_waitrequest(local_avm_aspace5_waitrequest[__i][__j]),
               .avm_readdata(local_avm_aspace5_readdata[__i][__j]),
               .avm_readdatavalid(local_avm_aspace5_readdatavalid[__i][__j]),
               .avm_writeack(local_avm_aspace5_writeack[__i][__j]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__i][__j]),
               .ic_arb_enable(local_icm_arb_enable[__i][__j]),
               .ic_arb_read(local_icm_arb_read[__i][__j]),
               .ic_arb_write(local_icm_arb_write[__i][__j]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .ic_arb_address(local_icm_arb_address[__i][__j]),
               .ic_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .ic_arb_stall(local_icm_arb_stall[__i][__j]),
               .ic_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .ic_rrp_data(local_icm_rrp_data[__i][__j])
            );

         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:bank
            logic port_enable [1:12];
            logic port_read [1:12];
            logic port_write [1:12];
            logic [10:0] port_address [1:12];
            logic [127:0] port_writedata [1:12];
            logic [15:0] port_byteenable [1:12];
            logic port_waitrequest [1:12];
            logic [127:0] port_readdata [1:12];
            logic port_readdatavalid [1:12];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(2048),
               .WIDTH(128),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .MAXIMUM_DEPTH(0),
               .RAM_BLOCK_TYPE("M10K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

            // INST mem1 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(2048),
               .WIDTH(128),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .MAXIMUM_DEPTH(0),
               .RAM_BLOCK_TYPE("M10K")
            )
            mem1
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[5]),
               .avs_port1_read(port_read[5]),
               .avs_port1_write(port_write[5]),
               .avs_port1_address(port_address[5]),
               .avs_port1_writedata(port_writedata[5]),
               .avs_port1_byteenable(port_byteenable[5]),
               .avs_port1_waitrequest(port_waitrequest[5]),
               .avs_port1_readdata(port_readdata[5]),
               .avs_port1_readdatavalid(port_readdatavalid[5]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[6]),
               .avs_port2_read(port_read[6]),
               .avs_port2_write(port_write[6]),
               .avs_port2_address(port_address[6]),
               .avs_port2_writedata(port_writedata[6]),
               .avs_port2_byteenable(port_byteenable[6]),
               .avs_port2_waitrequest(port_waitrequest[6]),
               .avs_port2_readdata(port_readdata[6]),
               .avs_port2_readdatavalid(port_readdatavalid[6]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[7]),
               .avs_port3_read(port_read[7]),
               .avs_port3_write(port_write[7]),
               .avs_port3_address(port_address[7]),
               .avs_port3_writedata(port_writedata[7]),
               .avs_port3_byteenable(port_byteenable[7]),
               .avs_port3_waitrequest(port_waitrequest[7]),
               .avs_port3_readdata(port_readdata[7]),
               .avs_port3_readdatavalid(port_readdatavalid[7]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[8]),
               .avs_port4_read(port_read[8]),
               .avs_port4_write(port_write[8]),
               .avs_port4_address(port_address[8]),
               .avs_port4_writedata(port_writedata[8]),
               .avs_port4_byteenable(port_byteenable[8]),
               .avs_port4_waitrequest(port_waitrequest[8]),
               .avs_port4_readdata(port_readdata[8]),
               .avs_port4_readdatavalid(port_readdatavalid[8])
            );

            // INST mem2 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(2048),
               .WIDTH(128),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .MAXIMUM_DEPTH(0),
               .RAM_BLOCK_TYPE("M10K")
            )
            mem2
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[9]),
               .avs_port1_read(port_read[9]),
               .avs_port1_write(port_write[9]),
               .avs_port1_address(port_address[9]),
               .avs_port1_writedata(port_writedata[9]),
               .avs_port1_byteenable(port_byteenable[9]),
               .avs_port1_waitrequest(port_waitrequest[9]),
               .avs_port1_readdata(port_readdata[9]),
               .avs_port1_readdatavalid(port_readdatavalid[9]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[10]),
               .avs_port2_read(port_read[10]),
               .avs_port2_write(port_write[10]),
               .avs_port2_address(port_address[10]),
               .avs_port2_writedata(port_writedata[10]),
               .avs_port2_byteenable(port_byteenable[10]),
               .avs_port2_waitrequest(port_waitrequest[10]),
               .avs_port2_readdata(port_readdata[10]),
               .avs_port2_readdatavalid(port_readdatavalid[10]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[11]),
               .avs_port3_read(port_read[11]),
               .avs_port3_write(port_write[11]),
               .avs_port3_address(port_address[11]),
               .avs_port3_writedata(port_writedata[11]),
               .avs_port3_byteenable(port_byteenable[11]),
               .avs_port3_waitrequest(port_waitrequest[11]),
               .avs_port3_readdata(port_readdata[11]),
               .avs_port3_readdatavalid(port_readdatavalid[11]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[12]),
               .avs_port4_read(port_read[12]),
               .avs_port4_write(port_write[12]),
               .avs_port4_address(port_address[12]),
               .avs_port4_writedata(port_writedata[12]),
               .avs_port4_byteenable(port_byteenable[12]),
               .avs_port4_waitrequest(port_waitrequest[12]),
               .avs_port4_readdata(port_readdata[12]),
               .avs_port4_readdatavalid(port_readdatavalid[12])
            );

         end

         for( __j = 0; __j < 6; __j = __j + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [10:0] b_arb_address [1];
            logic [127:0] b_arb_writedata [1];
            logic [15:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [127:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(128),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(11),
               .BYTEENA_W(16),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__i][__j]),
               .m_arb_enable(local_icm_arb_enable[__i][__j]),
               .m_arb_read(local_icm_arb_read[__i][__j]),
               .m_arb_write(local_icm_arb_write[__i][__j]),
               .m_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .m_arb_address(local_icm_arb_address[__i][__j]),
               .m_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .m_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .m_arb_stall(local_icm_arb_stall[__i][__j]),
               .m_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .m_rrp_data(local_icm_rrp_data[__i][__j]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [10:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [10:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[3].b_arb_read[0];
            assign icm_in_arb_write[0] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of gemm_ntt_jikK_system_interconnect_0
            gemm_ntt_jikK_system_interconnect_0 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [10:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [10:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[4].b_arb_read[0];
            assign icm_in_arb_write[0] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of gemm_ntt_jikK_system_interconnect_0
            gemm_ntt_jikK_system_interconnect_0 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port3bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [10:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [10:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[5].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[5].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[5].b_arb_read[0];
            assign icm_in_arb_write[0] = router[5].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[5].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[5].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[5].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[5].b_arb_byteenable[0];
            assign router[5].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[5].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[5].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[5].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of gemm_ntt_jikK_system_interconnect_0
            gemm_ntt_jikK_system_interconnect_0 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port4bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [10:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [10:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of gemm_ntt_jikK_system_interconnect_1
            gemm_ntt_jikK_system_interconnect_1 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port5bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [10:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [10:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[0];
            assign icm_in_arb_request[0] = router[3].b_arb_request[0];
            assign icm_in_arb_read[0] = router[3].b_arb_read[0];
            assign icm_in_arb_write[0] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[0];
            // INST data_ic of gemm_ntt_jikK_system_interconnect_0
            gemm_ntt_jikK_system_interconnect_0 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[5] = icm_out_arb_enable;
            assign bank[0].port_read[5] = icm_out_arb_read;
            assign bank[0].port_write[5] = icm_out_arb_write;
            assign bank[0].port_address[5] = icm_out_arb_address;
            assign bank[0].port_writedata[5] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[5] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[5];
            assign icm_out_rrp_data = bank[0].port_readdata[5];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[5];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port6bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [10:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [10:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[0];
            assign icm_in_arb_request[0] = router[4].b_arb_request[0];
            assign icm_in_arb_read[0] = router[4].b_arb_read[0];
            assign icm_in_arb_write[0] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[0];
            // INST data_ic of gemm_ntt_jikK_system_interconnect_0
            gemm_ntt_jikK_system_interconnect_0 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[6] = icm_out_arb_enable;
            assign bank[0].port_read[6] = icm_out_arb_read;
            assign bank[0].port_write[6] = icm_out_arb_write;
            assign bank[0].port_address[6] = icm_out_arb_address;
            assign bank[0].port_writedata[6] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[6] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[6];
            assign icm_out_rrp_data = bank[0].port_readdata[6];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[6];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port7bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [10:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [10:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[0] = router[5].b_arb_enable[0];
            assign icm_in_arb_request[0] = router[5].b_arb_request[0];
            assign icm_in_arb_read[0] = router[5].b_arb_read[0];
            assign icm_in_arb_write[0] = router[5].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[5].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[5].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[5].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[5].b_arb_byteenable[0];
            // INST data_ic of gemm_ntt_jikK_system_interconnect_0
            gemm_ntt_jikK_system_interconnect_0 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[7] = icm_out_arb_enable;
            assign bank[0].port_read[7] = icm_out_arb_read;
            assign bank[0].port_write[7] = icm_out_arb_write;
            assign bank[0].port_address[7] = icm_out_arb_address;
            assign bank[0].port_writedata[7] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[7] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[7];
            assign icm_out_rrp_data = bank[0].port_readdata[7];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[7];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port8bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [10:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [10:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of gemm_ntt_jikK_system_interconnect_1
            gemm_ntt_jikK_system_interconnect_1 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[8] = icm_out_arb_enable;
            assign bank[0].port_read[8] = icm_out_arb_read;
            assign bank[0].port_write[8] = icm_out_arb_write;
            assign bank[0].port_address[8] = icm_out_arb_address;
            assign bank[0].port_writedata[8] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[8] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[8];
            assign icm_out_rrp_data = bank[0].port_readdata[8];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[8];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port9bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [10:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [10:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[0];
            assign icm_in_arb_request[0] = router[3].b_arb_request[0];
            assign icm_in_arb_read[0] = router[3].b_arb_read[0];
            assign icm_in_arb_write[0] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[0];
            // INST data_ic of gemm_ntt_jikK_system_interconnect_0
            gemm_ntt_jikK_system_interconnect_0 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[9] = icm_out_arb_enable;
            assign bank[0].port_read[9] = icm_out_arb_read;
            assign bank[0].port_write[9] = icm_out_arb_write;
            assign bank[0].port_address[9] = icm_out_arb_address;
            assign bank[0].port_writedata[9] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[9] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[9];
            assign icm_out_rrp_data = bank[0].port_readdata[9];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[9];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port10bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [10:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [10:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[0];
            assign icm_in_arb_request[0] = router[4].b_arb_request[0];
            assign icm_in_arb_read[0] = router[4].b_arb_read[0];
            assign icm_in_arb_write[0] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[0];
            // INST data_ic of gemm_ntt_jikK_system_interconnect_0
            gemm_ntt_jikK_system_interconnect_0 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[10] = icm_out_arb_enable;
            assign bank[0].port_read[10] = icm_out_arb_read;
            assign bank[0].port_write[10] = icm_out_arb_write;
            assign bank[0].port_address[10] = icm_out_arb_address;
            assign bank[0].port_writedata[10] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[10] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[10];
            assign icm_out_rrp_data = bank[0].port_readdata[10];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[10];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port11bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [10:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [10:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[0] = router[5].b_arb_enable[0];
            assign icm_in_arb_request[0] = router[5].b_arb_request[0];
            assign icm_in_arb_read[0] = router[5].b_arb_read[0];
            assign icm_in_arb_write[0] = router[5].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[5].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[5].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[5].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[5].b_arb_byteenable[0];
            // INST data_ic of gemm_ntt_jikK_system_interconnect_0
            gemm_ntt_jikK_system_interconnect_0 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[11] = icm_out_arb_enable;
            assign bank[0].port_read[11] = icm_out_arb_read;
            assign bank[0].port_write[11] = icm_out_arb_write;
            assign bank[0].port_address[11] = icm_out_arb_address;
            assign bank[0].port_writedata[11] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[11] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[11];
            assign icm_out_rrp_data = bank[0].port_readdata[11];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[11];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port12bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [10:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [10:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of gemm_ntt_jikK_system_interconnect_1
            gemm_ntt_jikK_system_interconnect_1 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[12] = icm_out_arb_enable;
            assign bank[0].port_read[12] = icm_out_arb_read;
            assign bank[0].port_write[12] = icm_out_arb_write;
            assign bank[0].port_address[12] = icm_out_arb_address;
            assign bank[0].port_writedata[12] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[12] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[12];
            assign icm_out_rrp_data = bank[0].port_readdata[12];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[12];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

endmodule

/////////////////////////////////////////////////////////////////
// MODULE gemm_nnfW_top_wrapper_0
/////////////////////////////////////////////////////////////////
module gemm_nnfW_top_wrapper_0
(
   input logic start,
   input logic [415:0] kernel_arguments,
   input logic [31:0] work_dim,
   input logic [31:0] global_offset [2:0],
   output logic kernel_valid_out,
   output logic has_a_write_pending,
   output logic has_a_lsu_active,
   input logic [31:0] global_id [2:0],
   input logic [31:0] local_id [2:0],
   input logic [31:0] group_id [2:0],
   input logic [31:0] global_size [2:0],
   input logic [31:0] local_size [2:0],
   input logic [31:0] num_groups [2:0],
   input logic [31:0] workgroup_size,
   output logic kernel_stall_out,
   input logic kernel_valid_in,
   input logic clock,
   input logic resetn,
   input logic clock2x,
   // AVM avm_memcoalesce_A_load_0
   output logic avm_memcoalesce_A_load_0_enable,
   output logic avm_memcoalesce_A_load_0_read,
   output logic avm_memcoalesce_A_load_0_write,
   output logic [4:0] avm_memcoalesce_A_load_0_burstcount,
   output logic [29:0] avm_memcoalesce_A_load_0_address,
   output logic [255:0] avm_memcoalesce_A_load_0_writedata,
   output logic [31:0] avm_memcoalesce_A_load_0_byteenable,
   input logic avm_memcoalesce_A_load_0_waitrequest,
   input logic [255:0] avm_memcoalesce_A_load_0_readdata,
   input logic avm_memcoalesce_A_load_0_readdatavalid,
   input logic avm_memcoalesce_A_load_0_writeack,
   // AVM avm_memcoalesce_B_load_0
   output logic avm_memcoalesce_B_load_0_enable,
   output logic avm_memcoalesce_B_load_0_read,
   output logic avm_memcoalesce_B_load_0_write,
   output logic [4:0] avm_memcoalesce_B_load_0_burstcount,
   output logic [29:0] avm_memcoalesce_B_load_0_address,
   output logic [255:0] avm_memcoalesce_B_load_0_writedata,
   output logic [31:0] avm_memcoalesce_B_load_0_byteenable,
   input logic avm_memcoalesce_B_load_0_waitrequest,
   input logic [255:0] avm_memcoalesce_B_load_0_readdata,
   input logic avm_memcoalesce_B_load_0_readdatavalid,
   input logic avm_memcoalesce_B_load_0_writeack,
   // AVM avm_memdep_5
   output logic avm_memdep_5_enable,
   output logic avm_memdep_5_read,
   output logic avm_memdep_5_write,
   output logic [4:0] avm_memdep_5_burstcount,
   output logic [29:0] avm_memdep_5_address,
   output logic [255:0] avm_memdep_5_writedata,
   output logic [31:0] avm_memdep_5_byteenable,
   input logic avm_memdep_5_waitrequest,
   input logic [255:0] avm_memdep_5_readdata,
   input logic avm_memdep_5_readdatavalid,
   input logic avm_memdep_5_writeack,
   // AVM avm_unnamed_gemm_nnfW5
   output logic avm_unnamed_gemm_nnfW5_enable,
   output logic avm_unnamed_gemm_nnfW5_read,
   output logic avm_unnamed_gemm_nnfW5_write,
   output logic [4:0] avm_unnamed_gemm_nnfW5_burstcount,
   output logic [29:0] avm_unnamed_gemm_nnfW5_address,
   output logic [255:0] avm_unnamed_gemm_nnfW5_writedata,
   output logic [31:0] avm_unnamed_gemm_nnfW5_byteenable,
   input logic avm_unnamed_gemm_nnfW5_waitrequest,
   input logic [255:0] avm_unnamed_gemm_nnfW5_readdata,
   input logic avm_unnamed_gemm_nnfW5_readdatavalid,
   input logic avm_unnamed_gemm_nnfW5_writeack
);
   genvar __i;
   genvar __j;
   logic lmem_invalid_single_bit;
   logic lmem_invalid_aspaces;
   logic local_avm_aspace6_enable [1][2];
   logic local_avm_aspace6_read [1][2];
   logic local_avm_aspace6_write [1][2];
   logic local_avm_aspace6_burstcount [1][2];
   logic [31:0] local_avm_aspace6_address [1][2];
   logic [511:0] local_avm_aspace6_writedata [1][2];
   logic [63:0] local_avm_aspace6_byteenable [1][2];
   logic local_avm_aspace6_waitrequest [1][2];
   logic [511:0] local_avm_aspace6_readdata [1][2];
   logic local_avm_aspace6_readdatavalid [1][2];
   logic local_avm_aspace6_writeack [1][2];

   // INST kernel of gemm_nnfW_function_wrapper
   gemm_nnfW_function_wrapper kernel
   (
      .local_router_hang(lmem_invalid_single_bit),
      .start(start),
      .kernel_arguments(kernel_arguments),
      .work_dim(work_dim),
      .global_offset_0(global_offset[0]),
      .global_offset_1(global_offset[1]),
      .global_offset_2(global_offset[2]),
      .kernel_valid_out(kernel_valid_out),
      .has_a_write_pending(has_a_write_pending),
      .has_a_lsu_active(has_a_lsu_active),
      .global_id_0(global_id[0]),
      .global_id_1(global_id[1]),
      .global_id_2(global_id[2]),
      .local_id_0(local_id[0]),
      .local_id_1(local_id[1]),
      .local_id_2(local_id[2]),
      .group_id_0(group_id[0]),
      .group_id_1(group_id[1]),
      .group_id_2(group_id[2]),
      .global_size_0(global_size[0]),
      .global_size_1(global_size[1]),
      .global_size_2(global_size[2]),
      .local_size_0(local_size[0]),
      .local_size_1(local_size[1]),
      .local_size_2(local_size[2]),
      .num_groups_0(num_groups[0]),
      .num_groups_1(num_groups[1]),
      .num_groups_2(num_groups[2]),
      .workgroup_size(workgroup_size),
      .kernel_stall_out(kernel_stall_out),
      .kernel_valid_in(kernel_valid_in),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_memcoalesce_A_load_0
      .avm_memcoalesce_A_load_0_enable(avm_memcoalesce_A_load_0_enable),
      .avm_memcoalesce_A_load_0_read(avm_memcoalesce_A_load_0_read),
      .avm_memcoalesce_A_load_0_write(avm_memcoalesce_A_load_0_write),
      .avm_memcoalesce_A_load_0_burstcount(avm_memcoalesce_A_load_0_burstcount),
      .avm_memcoalesce_A_load_0_address(avm_memcoalesce_A_load_0_address),
      .avm_memcoalesce_A_load_0_writedata(avm_memcoalesce_A_load_0_writedata),
      .avm_memcoalesce_A_load_0_byteenable(avm_memcoalesce_A_load_0_byteenable),
      .avm_memcoalesce_A_load_0_waitrequest(avm_memcoalesce_A_load_0_waitrequest),
      .avm_memcoalesce_A_load_0_readdata(avm_memcoalesce_A_load_0_readdata),
      .avm_memcoalesce_A_load_0_readdatavalid(avm_memcoalesce_A_load_0_readdatavalid),
      .avm_memcoalesce_A_load_0_writeack(avm_memcoalesce_A_load_0_writeack),
      // AVM avm_memcoalesce_B_load_0
      .avm_memcoalesce_B_load_0_enable(avm_memcoalesce_B_load_0_enable),
      .avm_memcoalesce_B_load_0_read(avm_memcoalesce_B_load_0_read),
      .avm_memcoalesce_B_load_0_write(avm_memcoalesce_B_load_0_write),
      .avm_memcoalesce_B_load_0_burstcount(avm_memcoalesce_B_load_0_burstcount),
      .avm_memcoalesce_B_load_0_address(avm_memcoalesce_B_load_0_address),
      .avm_memcoalesce_B_load_0_writedata(avm_memcoalesce_B_load_0_writedata),
      .avm_memcoalesce_B_load_0_byteenable(avm_memcoalesce_B_load_0_byteenable),
      .avm_memcoalesce_B_load_0_waitrequest(avm_memcoalesce_B_load_0_waitrequest),
      .avm_memcoalesce_B_load_0_readdata(avm_memcoalesce_B_load_0_readdata),
      .avm_memcoalesce_B_load_0_readdatavalid(avm_memcoalesce_B_load_0_readdatavalid),
      .avm_memcoalesce_B_load_0_writeack(avm_memcoalesce_B_load_0_writeack),
      // AVM avm_memdep_5
      .avm_memdep_5_enable(avm_memdep_5_enable),
      .avm_memdep_5_read(avm_memdep_5_read),
      .avm_memdep_5_write(avm_memdep_5_write),
      .avm_memdep_5_burstcount(avm_memdep_5_burstcount),
      .avm_memdep_5_address(avm_memdep_5_address),
      .avm_memdep_5_writedata(avm_memdep_5_writedata),
      .avm_memdep_5_byteenable(avm_memdep_5_byteenable),
      .avm_memdep_5_waitrequest(avm_memdep_5_waitrequest),
      .avm_memdep_5_readdata(avm_memdep_5_readdata),
      .avm_memdep_5_readdatavalid(avm_memdep_5_readdatavalid),
      .avm_memdep_5_writeack(avm_memdep_5_writeack),
      // AVM avm_unnamed_gemm_nnfW5
      .avm_unnamed_gemm_nnfW5_enable(avm_unnamed_gemm_nnfW5_enable),
      .avm_unnamed_gemm_nnfW5_read(avm_unnamed_gemm_nnfW5_read),
      .avm_unnamed_gemm_nnfW5_write(avm_unnamed_gemm_nnfW5_write),
      .avm_unnamed_gemm_nnfW5_burstcount(avm_unnamed_gemm_nnfW5_burstcount),
      .avm_unnamed_gemm_nnfW5_address(avm_unnamed_gemm_nnfW5_address),
      .avm_unnamed_gemm_nnfW5_writedata(avm_unnamed_gemm_nnfW5_writedata),
      .avm_unnamed_gemm_nnfW5_byteenable(avm_unnamed_gemm_nnfW5_byteenable),
      .avm_unnamed_gemm_nnfW5_waitrequest(avm_unnamed_gemm_nnfW5_waitrequest),
      .avm_unnamed_gemm_nnfW5_readdata(avm_unnamed_gemm_nnfW5_readdata),
      .avm_unnamed_gemm_nnfW5_readdatavalid(avm_unnamed_gemm_nnfW5_readdatavalid),
      .avm_unnamed_gemm_nnfW5_writeack(avm_unnamed_gemm_nnfW5_writeack),
      // AVM avm_memdep
      .avm_memdep_enable(local_avm_aspace6_enable[0][0]),
      .avm_memdep_read(local_avm_aspace6_read[0][0]),
      .avm_memdep_write(local_avm_aspace6_write[0][0]),
      .avm_memdep_burstcount(local_avm_aspace6_burstcount[0][0]),
      .avm_memdep_address(local_avm_aspace6_address[0][0]),
      .avm_memdep_writedata(local_avm_aspace6_writedata[0][0]),
      .avm_memdep_byteenable(local_avm_aspace6_byteenable[0][0]),
      .avm_memdep_waitrequest(local_avm_aspace6_waitrequest[0][0]),
      .avm_memdep_readdata(local_avm_aspace6_readdata[0][0]),
      .avm_memdep_readdatavalid(local_avm_aspace6_readdatavalid[0][0]),
      .avm_memdep_writeack(local_avm_aspace6_writeack[0][0]),
      // AVM avm_unnamed_gemm_nnfW9
      .avm_unnamed_gemm_nnfW9_enable(local_avm_aspace6_enable[0][1]),
      .avm_unnamed_gemm_nnfW9_read(local_avm_aspace6_read[0][1]),
      .avm_unnamed_gemm_nnfW9_write(local_avm_aspace6_write[0][1]),
      .avm_unnamed_gemm_nnfW9_burstcount(local_avm_aspace6_burstcount[0][1]),
      .avm_unnamed_gemm_nnfW9_address(local_avm_aspace6_address[0][1]),
      .avm_unnamed_gemm_nnfW9_writedata(local_avm_aspace6_writedata[0][1]),
      .avm_unnamed_gemm_nnfW9_byteenable(local_avm_aspace6_byteenable[0][1]),
      .avm_unnamed_gemm_nnfW9_waitrequest(local_avm_aspace6_waitrequest[0][1]),
      .avm_unnamed_gemm_nnfW9_readdata(local_avm_aspace6_readdata[0][1]),
      .avm_unnamed_gemm_nnfW9_readdatavalid(local_avm_aspace6_readdatavalid[0][1]),
      .avm_unnamed_gemm_nnfW9_writeack(local_avm_aspace6_writeack[0][1])
   );

   assign lmem_invalid_single_bit = |lmem_invalid_aspaces;
   generate
   begin:local_mem_system_aspace6
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [8:0] local_icm_arb_address [1][2];
      logic [511:0] local_icm_arb_writedata [1][2];
      logic [63:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [511:0] local_icm_rrp_data [1][2];

      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:local_mem_group
         for( __j = 0; __j < 2; __j = __j + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(512),
               .WRITEDATA_W(512),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(64)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace6_enable[__i][__j]),
               .avm_read(local_avm_aspace6_read[__i][__j]),
               .avm_write(local_avm_aspace6_write[__i][__j]),
               .avm_burstcount(local_avm_aspace6_burstcount[__i][__j]),
               .avm_address(local_avm_aspace6_address[__i][__j]),
               .avm_writedata(local_avm_aspace6_writedata[__i][__j]),
               .avm_byteenable(local_avm_aspace6_byteenable[__i][__j]),
               .avm_waitrequest(local_avm_aspace6_waitrequest[__i][__j]),
               .avm_readdata(local_avm_aspace6_readdata[__i][__j]),
               .avm_readdatavalid(local_avm_aspace6_readdatavalid[__i][__j]),
               .avm_writeack(local_avm_aspace6_writeack[__i][__j]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__i][__j]),
               .ic_arb_enable(local_icm_arb_enable[__i][__j]),
               .ic_arb_read(local_icm_arb_read[__i][__j]),
               .ic_arb_write(local_icm_arb_write[__i][__j]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .ic_arb_address(local_icm_arb_address[__i][__j]),
               .ic_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .ic_arb_stall(local_icm_arb_stall[__i][__j]),
               .ic_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .ic_rrp_data(local_icm_rrp_data[__i][__j])
            );

         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [8:0] port_address [1:2];
            logic [511:0] port_writedata [1:2];
            logic [63:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [511:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(512),
               .WIDTH(512),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .PREFERRED_WIDTH(320),
               .MAXIMUM_DEPTH(0),
               .RAM_BLOCK_TYPE("M10K")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __j = 0; __j < 2; __j = __j + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [8:0] b_arb_address [1];
            logic [511:0] b_arb_writedata [1];
            logic [63:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [511:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(512),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(9),
               .BYTEENA_W(64),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__i][__j]),
               .m_arb_enable(local_icm_arb_enable[__i][__j]),
               .m_arb_read(local_icm_arb_read[__i][__j]),
               .m_arb_write(local_icm_arb_write[__i][__j]),
               .m_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .m_arb_address(local_icm_arb_address[__i][__j]),
               .m_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .m_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .m_arb_stall(local_icm_arb_stall[__i][__j]),
               .m_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .m_rrp_data(local_icm_rrp_data[__i][__j]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [8:0] icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [8:0] icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of gemm_ntt_jikK_system_interconnect_2
            gemm_ntt_jikK_system_interconnect_2 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [8:0] icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [8:0] icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of gemm_ntt_jikK_system_interconnect_3
            gemm_ntt_jikK_system_interconnect_3 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

endmodule

/////////////////////////////////////////////////////////////////
// MODULE gemm_ntt_jikK_system_interconnect_0
/////////////////////////////////////////////////////////////////
module gemm_ntt_jikK_system_interconnect_0
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [10:0] m_arb_address [1],
   input logic [127:0] m_arb_writedata [1],
   input logic [15:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [127:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [10:0] mout_arb_address,
   output logic [127:0] mout_arb_writedata,
   output logic [15:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [127:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(11),
            .BYTEENA_W(16),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(11),
            .BYTEENA_W(16),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(128),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(11),
            .BYTEENA_W(16),
            .ID_W(1),
            .NUM_READ_MASTERS(0),
            .NUM_WRITE_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(11),
         .BYTEENA_W(16),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(11),
         .BYTEENA_W(16),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(128),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(11),
         .BYTEENA_W(16),
         .ID_W(1),
         .NUM_READ_MASTERS(0),
         .NUM_WRITE_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE gemm_ntt_jikK_system_interconnect_1
/////////////////////////////////////////////////////////////////
module gemm_ntt_jikK_system_interconnect_1
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [10:0] m_arb_address [1],
   input logic [127:0] m_arb_writedata [1],
   input logic [15:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [127:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [10:0] mout_arb_address,
   output logic [127:0] mout_arb_writedata,
   output logic [15:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [127:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(11),
            .BYTEENA_W(16),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(11),
            .BYTEENA_W(16),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(128),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(11),
            .BYTEENA_W(16),
            .ID_W(1),
            .NUM_READ_MASTERS(1),
            .NUM_WRITE_MASTERS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(11),
         .BYTEENA_W(16),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(11),
         .BYTEENA_W(16),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(128),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(11),
         .BYTEENA_W(16),
         .ID_W(1),
         .NUM_READ_MASTERS(1),
         .NUM_WRITE_MASTERS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE gemm_ntt_jikK_system_interconnect_2
/////////////////////////////////////////////////////////////////
module gemm_ntt_jikK_system_interconnect_2
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [8:0] m_arb_address [1],
   input logic [511:0] m_arb_writedata [1],
   input logic [63:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [511:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [8:0] mout_arb_address,
   output logic [511:0] mout_arb_writedata,
   output logic [63:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [511:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(9),
            .BYTEENA_W(64),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(9),
            .BYTEENA_W(64),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(512),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(9),
            .BYTEENA_W(64),
            .ID_W(1),
            .NUM_READ_MASTERS(0),
            .NUM_WRITE_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(9),
         .BYTEENA_W(64),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(9),
         .BYTEENA_W(64),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(512),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(9),
         .BYTEENA_W(64),
         .ID_W(1),
         .NUM_READ_MASTERS(0),
         .NUM_WRITE_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE gemm_ntt_jikK_system_interconnect_3
/////////////////////////////////////////////////////////////////
module gemm_ntt_jikK_system_interconnect_3
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [8:0] m_arb_address [1],
   input logic [511:0] m_arb_writedata [1],
   input logic [63:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [511:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [8:0] mout_arb_address,
   output logic [511:0] mout_arb_writedata,
   output logic [63:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [511:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(9),
            .BYTEENA_W(64),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(9),
            .BYTEENA_W(64),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(512),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(9),
            .BYTEENA_W(64),
            .ID_W(1),
            .NUM_READ_MASTERS(1),
            .NUM_WRITE_MASTERS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(9),
         .BYTEENA_W(64),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(9),
         .BYTEENA_W(64),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(512),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(9),
         .BYTEENA_W(64),
         .ID_W(1),
         .NUM_READ_MASTERS(1),
         .NUM_WRITE_MASTERS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

